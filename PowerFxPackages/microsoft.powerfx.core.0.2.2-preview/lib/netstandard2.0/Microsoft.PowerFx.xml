<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerFx.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.PowerFx.ThreadSafeImmutableAttribute">
            <summary>
            This type is thread safe because it's immutable. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.ThreadSafeImmutableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.ThreadSafeImmutableAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.ThreadSafeProtectedByLockAttribute">
            <summary>
            Mark this field is threadsafe because it's protected by a lock.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.ThreadSafeProtectedByLockAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.ThreadSafeProtectedByLockAttribute"/> class.
            </summary>
            <param name="lockName">name of field in this class that's used as a lock to protect this field.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Core.App.Controls.PropertyRuleCategory">
            <summary>
            Categories of rules and properties, e.g. data, design, behavior.
            When published, this enum is not available to JavaScript;
            Please keep these values in sync with src/AppMagic/js/AppMagic.Controls/Constants.ts.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.App.Controls.PropertyRuleCategory.Unknown">
            <summary>
            Represents a missing property category when deserializing
            Should be cleaned up by document converter, only occurs if 
            control template is invalid
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.App.Controls.RuleProviderType">
            <summary>
            Rule provider types. These are primarily used by the components.
            System - Set on all rules on on component definition.
            User - Set when any customization on property rules in component instance. 
            Unknown - Unknown when provider is not known.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.DefaultSeverity">
            <summary>
            The severity to use in the default EnsureError and Error functions. Is not
            used in the Errors function.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.EnsureError(Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Localization.ErrorResourceKey,System.Object[])">
             <summary>
             Only adds and returns the error if its severity is equal to or higher
             than the existing errors for the node in the container.
            
             Severity is defaulted to critical.
             </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.Error(Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Localization.ErrorResourceKey,System.Object[])">
             <summary>
             Adds an error to the container and returns the composed error value
             that was inserted.
            
             Severity is defaulted to critical.
             </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.EnsureError(Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity,Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Localization.ErrorResourceKey,System.Object[])">
            <summary>
            Only adds and returns the error if its severity is equal to or higher
            than the existing errors for the node in the container.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.Error(Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity,Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Localization.ErrorResourceKey,System.Object[])">
            <summary>
            Adds an error to the container and returns the composed error value
            that was inserted.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer.Errors(Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Types.DType,System.Collections.Generic.KeyValuePair{System.String,Microsoft.PowerFx.Core.Types.DType},Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Used to apply errors due to differing type schemas. Use schemaDifferenceType = DType.Invalid to indicate
            that the schema difference is due to a missing member.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.App.ErrorContainers.LimitedSeverityErrorContainer">
            <summary>
            Ensures that only errors under a given severity will be posted. This is
            useful if you're calling a function to check validity and don't want error
            side effects, but also want to provide warnings, for instance.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.App.IExternalEnabledFeatures">
            <summary>
            All hosts should use <see cref="T:Microsoft.PowerFx.Core.App.DefaultEnabledFeatures"/> except for Canvas Apps (legacy flag support)
            This interface and the flags in it should be deprecated once the below flags are removed from Canvas Apps
            DO NOT add flags to this clas without very strong justification. We do not want to allow PowerFx
            behavior to be different between target platforms. 
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Binding.TexlBinding.MaxSelectsToInclude">
            <summary>
            The maximum number of selects in a table that will be included in data call.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Binding.TexlBinding.ThisRecordDefaultName">
            <summary>
            Default name used to access a Lambda scope.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Binding.TexlBinding.UsedControlProperties">
            <summary>
            UsedControlProperties  is for processing edges required for indirect control property references.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Binding.TexlBinding.ContextScope">
            <summary>
            The fields of this type are defined as valid keywords for this binding.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.AddVolatileVariables(Microsoft.PowerFx.Syntax.TexlNode,System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            See documentation for <see cref="M:Microsoft.PowerFx.Core.Binding.TexlBinding.GetVolatileVariables(Microsoft.PowerFx.Syntax.TexlNode)"/> for more information.
            </summary>
            <param name="node">
            Node to which volatile variables are being added.
            </param>
            <param name="variables">
            The variables that are to be added to the list associated with <paramref name="node"/>.
            </param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.SetIsUnliftable(Microsoft.PowerFx.Syntax.TexlNode,System.Boolean)">
            <summary>
            See documentation for <see cref="M:Microsoft.PowerFx.Core.Binding.TexlBinding.GetVolatileVariables(Microsoft.PowerFx.Syntax.TexlNode)"/> for more information.
            </summary>
            <param name="node">
            Node whose liftability will be altered by this invocation.
            </param>
            <param name="value">
            The value that the node's liftability should assume by the invocation of this method.
            </param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.GetVolatileVariables(Microsoft.PowerFx.Syntax.TexlNode)">
             <summary>
             A node's "volatile variables" are the names whose values may at runtime have be modified at some
             point before the node to which these variables pertain is executed.
            
             e.g. <code>Set(w, 1); Set(x, w); Set(y, x); Set(z, y);</code>
             The call node Set(x, w); will have an entry in volatile variables containing just "w", Set(y, x); will
             have [w, x], and Set(z, y); will have [w, x, y].
            
             <see cref="M:Microsoft.PowerFx.Core.Functions.TexlFunction.GetIdentifierOfModifiedValue(Microsoft.PowerFx.Syntax.TexlNode[],Microsoft.PowerFx.Syntax.TexlNode@)"/> reports which variables may be
             changed by a call node, and they are recorded when the call node is analyzed and a reference to
             its TexlFunction is acquired. They are propagated to subsequent nodes in the variadic operator as
             the children of the variadic node are being accepted by the visitor.
            
             When the children of the variadic expression are visited, the volatile variables are transferred to the
             children's children, and so on and so forth, in a manner obeying that which is being commented.
             As the tree is descended, the visitor may encounter a first name node that will receive itself among
             the volatile variables of its parent. In such a case, neither this node nor any of its ancestors up to
             the root of the chained node may be lifted during code generation.
            
             The unliftability propagates back to the ancestors during the post visit traversal of the tree, and is
             ultimately read by the code generator when it visits these nodes and may attempt to lift their
             expressions.
             </summary>
             <param name="node">
             The node of which volatile variables are being requested.
             </param>
             <returns>
             A list containing the volatile variables of <paramref name="node"/>.
             </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.GetScopeIdent(Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Utils.DName@)">
            <summary>
            Gets the renamed ident and returns true if the node is an AsNode
            Otherwise returns false and sets scopeIdent to the default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.IsUnliftable(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            See documentation for <see cref="M:Microsoft.PowerFx.Core.Binding.TexlBinding.GetVolatileVariables(Microsoft.PowerFx.Syntax.TexlNode)"/> for more information.
            </summary>
            <param name="node">
            Node whose liftability is questioned.
            </param>
            <returns>
            Whether the current node is liftable.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.Visitor.CheckComparisonTypeOneOf(Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Types.DType[])">
            <summary>
            Helper for Lt/leq/geq/gt type checking. Restricts type to be one of the provided set, without coercion (except for primary output props).
            </summary>
            <param name="node">Node for which we are checking the type.</param>
            <param name="alternateTypes">List of acceptable types for this operation, in order of suitability.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.Visitor.PreVisit(Microsoft.PowerFx.Syntax.VariadicOpNode)">
            <summary>
            Accepts each child, records which identifiers are affected by each child and sets the binding
            appropriately.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.Visitor.TryGetBestOverload(Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Syntax.CallNode,Microsoft.PowerFx.Core.Types.DType[],Microsoft.PowerFx.Core.Functions.TexlFunction[],Microsoft.PowerFx.Core.Functions.TexlFunction@,System.Collections.Generic.Dictionary{Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Core.Types.DType}@,Microsoft.PowerFx.Core.Types.DType@)">
            <summary>
            Tries to get the best suited overload for <paramref name="node"/> according to <paramref name="txb"/> and
            returns true if it is found.
            </summary>
            <param name="txb">
            Binding that will help select the best overload.
            </param>
            <param name="node">
            CallNode for which the best overload will be determined.
            </param>
            <param name="argTypes">
            List of argument types for <paramref name="node.Args.Args"/>.
            </param>
            <param name="overloads">
            All overloads for <paramref name="node"/>. An element of this list will be returned.
            </param>
            <param name="bestOverload">
            Set to the best overload when this method completes.
            </param>
            <param name="nodeToCoercedTypeMap">
            Set to the types to which <paramref name="node.Args.Args"/> must be coerced in order for
            <paramref name="bestOverload"/> to be valid.
            </param>
            <param name="returnType">
            The return type for <paramref name="bestOverload"/>.
            </param>
            <returns>
            True if a valid overload was found, false if not.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.TexlBinding.Visitor.FindBestErrorOverload(Microsoft.PowerFx.Core.Functions.TexlFunction[],Microsoft.PowerFx.Core.Types.DType[],System.Int32)">
            <summary>
            Returns best overload in case there are no matches based on first argument and order.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.FirstNameInfo">
            <summary>
            Binding information for "first" names.a.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.NameInfo">
            <summary>
            Binding information associated with a name.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.BindInfo.NameInfo.As``1">
            <summary>
            Asserts that the object is in fact of type T before casting.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.NameLookupInfo">
            <summary>
            Temporary name information used by the Binder---Document lookup handshake/mechanism.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Binding.BindInfo.NameLookupInfo.DisplayName">
            <summary>
            Some resolved objects may have a display name associated with them. If this is non-default,
            it has the display name of the object in Data. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.ParentInfo">
            <summary>
            Binding information for "Parent" names.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.ScopedNameLookupInfo">
            <summary>
            Lookup info for a local rule scope.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindInfo.SelfInfo">
            <summary>
            Binding information for "Self".
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Binding.BindingConfig">
            <summary>
            Configuration for an invocation of the binder.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Binding.BindKind.DeprecatedImplicitThisItem">
            <summary>
            STOP. Only use this if you are 100% clear on what you're doing
            This bindkind is not valid in documents loaded after V1_287
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Binding.INameResolver.LookupFunctionsInNamespace(Microsoft.PowerFx.Core.Utils.DPath)">
            <returns>
            List of functions in <paramref name="nameSpace"/>.
            </returns>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.AllowedValuesMetadata.ValuesSchema">
            <summary>
            The schema of the table returned from the document function DataSourceInfo(DS, DataSourceInfo.AllowedValues, "columnName").
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Entities.ColumnMetadata">
            <summary>
            Implements logic for describing metadata about a datasource column.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Entities.IExternalOptionSet">
            <summary>
            Describe an option set - maybe implemented by each back end over their existing enum-like symbols. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.IExternalOptionSet.OptionNames">
            <summary>
            Logical names for the fields in this Option Set.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.IExternalViewInfo.ViewNames">
            <summary>
            Logical names for the members in this View.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Entities.IDataColumnMetadata">
            <summary>
            Information about column metadata used to define type for multi-choice columns.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.IDisplayMapped`1.DisplayNameMapping">
            <summary>
            Maps logical names to display names.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.IDisplayMapped`1.PreviousDisplayNameMapping">
            <summary>
            Display Mapped objects occasionally change their display names, in which case we need
            both the new and old display names to correctly rewrite them in rules.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.DataSourceToQueryOptionsMap.AddDataSource(Microsoft.PowerFx.Core.Entities.IExternalTabularDataSource)">
            <summary>
            Adds Associated data source entry if it is valid and not already added to rule.
            </summary>
            <param name="tabularDataSourceInfo"></param>
            <returns>true if this operation resulted in change.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.DataSourceToQueryOptionsMap.AddSelect(Microsoft.PowerFx.Core.Entities.IExternalTabularDataSource,Microsoft.PowerFx.Core.Utils.DName)">
            <summary>
            Adds select column to tabular datasource data call.
            </summary>
            <param name="tabularDataSourceInfo"></param>
            <param name="selectFieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions">
            <summary>
            Store information about data call queryOptions for a particular Navigation data source.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions.ReplaceExpandsWithAnnotation(Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions)">
            <summary>
            Remove expands and replace it with annotated select column.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions.MergeQueryOptions(Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions,Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions)">
            <summary>
            Helper method used to merge two different entity query options.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Entities.QueryOptions.TabularDataQueryOptions">
            <summary>
            Store information about data call queryOptions for a particular TabularDataSource and its navigations.
            This should be serializable to "TableQueryOptions" in \src\AppMagic\js\AppMagic.Runtime.App\_AppMagic\Data\Query\QueryOptions.ts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Entities.QueryOptions.TabularDataQueryOptions.Expands">
            <summary>
            List of navigation datasources and their query options.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.TabularDataQueryOptions.AddRelatedColumns">
            <summary>
            Helper method used to add related columns like annotated columns for cds navigation fields. ex: _primarycontactid_value.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Entities.QueryOptions.TabularDataQueryOptions.MergeQueryOptions(Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions,Microsoft.PowerFx.Core.Entities.QueryOptions.ExpandQueryOptions)">
            <summary>
            Helper method used to merge two different entity query options.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.InnerError">
            <summary>
            The inner error, if any. This may be null.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.ErrorKind">
            <summary>
            The kind of error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.ShortMessage">
            <summary>
            Returns the short error message to be consumed by UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.LongMessage">
            <summary>
            Returns a longer explanation of the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.MessageKey">
            <summary>
            Returns the key of the error message to be consumed by UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.MessageArgs">
            <summary>
            Returns the args of the error message. Used for building new errors out of existing ones, in some cases.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.HowToFixMessages">
            <summary>
            Strings describing potential fixes to the error.
            This can be null if no information exists, or one
            or more strings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.WhyToFixMessage">
            <summary>
            A description about why the error should be addressed.
            This may be null if no information exists.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.Links">
            <summary>
            A set of URLs to support articles for this error.
            Used by client UI to display helpful links.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.Entity">
            <summary>
            Returns the name of the entity for the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.EntityId">
            <summary>
            Returns the ID of the entity for the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.Parent">
            <summary>
            Returns the name of the parent of the entity if there is one.
            This could be empty string if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.PropertyName">
            <summary>
            Returns the property this error is for to be consumed by UI.
            This could be empty string if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.TextSpan">
            <summary>
            TextSpan for the rule error.
            This could be null if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.SinkTypeErrors">
            <summary>
            SinkTypeErrors for the rule error.
            This could be null if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.Severity">
            <summary>
            The error severity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.BaseError.InternalException">
            <summary>
            The internal exception, which can be null
            This is for diagnostic purposes only, NOT for display to the end-user.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Errors.BaseError.GetHowToFix(System.String,System.String)">
             <summary>
             Retrieves the "HowToFix" messages for a particular message key. These messages should either
             be named with the suffix "_HowToFix" or "_HowToFix1, _HowToFix2..." if multiple exist.
            
             NOTE: Usage of this pattern is deprecated. New errors should use the StringResources.ErrorResouce
             format to specify HowToFix messages.
             </summary>
             <param name="messageKey">Key for the error message.</param>
             <param name="locale"></param>
             <returns>List of how to fix messages. Null if none exist.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity">
            <summary>
            Internal error code - part of Transport Layer and used by Canvas Apps.
            See <see cref="T:Microsoft.PowerFx.ErrorSeverity"/> for public facing type. 
            Severity of errors provided.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Verbose">
            <summary>
            A suggestion about possible high-level improvements or refactoring that may help the user
            get a better app experience.
            Examples: performance changes
            Verbose messages will not be part of 'ChoreUpdateRulesWithErrors' as they would be analysed when the dependency changes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Suggestion">
            <summary>
            A suggestion about possible improvements or refactoring that may help the user
            get a better app experience.
            Examples: refactoring suggestions.
            Suggestions will not be part of 'ChoreUpdateRulesWithErrors' as they would be analysed when the dependency changes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Warning">
            <summary>
            A warning about a potential problem. These will typically not prevent normal rule execution.
            Examples: certain type errors/warnings.
            Warnings will not be part of 'ChoreUpdateRulesWithErrors' as they would be analysed when the dependency changes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Moderate">
            <summary>
            A moderate error that may prevent rules from executing properly.
            Examples: Service unavailable, service schema changed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Severe">
            <summary>
            A severe error that will likely prevent rules from executing properly.
            This type of errors prevents generation of code and publishing.
            Examples: invocation of unknown functions, invalid names, certain type errors.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Errors.DocumentErrorSeverity.Critical">
            <summary>
            A critical error, e.g. an error that prevents rules from executing properly.
            This type of errors prevent generation of code and publishing.
            Example: syntax errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.InnerError">
            <summary>
            The inner error for this document error, or null if there is no inner error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.ErrorKind">
            <summary>
            The kind of error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.ShortMessage">
            <summary>
            The error message to be consumed by UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.LongMessage">
            <summary>
            Returns a longer explanation of the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.MessageKey">
            <summary>
            The key of the error message to be consumed by UI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.ErrorResourceKey">
            <summary>
            Returns the key of the error message. Used for building new errors out of existing ones.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.MessageArgs">
            <summary>
            Returns the args of the error message. Used for building new errors out of existing ones, in some cases.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.HowToFixMessages">
            <summary>
            Strings describing potential fixes to the error.
            This can be null if no information exists, or one
            or more strings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.WhyToFixMessage">
            <summary>
            A description about why the error should be addressed.
            This may be null if no information exists.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.Links">
            <summary>
            A set of URLs to support articles for this error.
            Used by client UI to display helpful links.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.Entity">
            <summary>
            Name of the entity for the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.EntityId">
            <summary>
            Id of the entity for the error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.Parent">
            <summary>
            Name of the parent of the entity if there is one.
            This could be empty string if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.PropertyName">
            <summary>
            The property this error is for to be consumed by UI.
            This could be empty string if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.TextSpan">
            <summary>
            TextSpan for the rule error.
            This could be null if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.SinkTypeErrors">
            <summary>
            SinkTypeErrors for the rule error.
            This could be null if this is not a rule error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.Severity">
            <summary>
            The error severity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Errors.IDocumentError.InternalException">
            <summary>
            The internal exception, which can be null
            This is for diagnostic purposes only, NOT for display to the end-user.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Functions.Delegation.DelegationMetadata.DelegationMetadata">
            <summary>
            This represents a delegatable operation metadata about the imported delegatable CdpDataSourceInfo.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Functions.Delegation.IDataEntityMetadata">
            <summary>
            Metadata information about data entity types.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo">
            <summary>
            Class holding behavior informaion for all functions "with scope",
            i.e. that take lambda parameters. For example: Filter, First,
            Sort, etc.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo.UsesAllFieldsInScope">
            <summary>
            True if the function uses potentially all the fields in each row to produce
            the final result, or false otherwise.
            For example, Filter uses all the fields, and produces a value that depends
            on all the fields. So does AddColumns, DropColumns, etc.
            However, Sum/Min/Max/Average/etc use only the fields specified in predicates.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo.SupportsAsyncLambdas">
            <summary>
            True if the function supports async lambdas, or false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo.AcceptsLiteralPredicates">
            <summary>
            If false, the author will be warned when inputting predicates that
            do not reference the input table.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo.IteratesOverScope">
            <summary>
            True indicates that the function performs some sort of iteration over
            the scope data source, applying the lambda. This is used to determine what
            default behavior to block (such as refusing lambdas that modify the scope).
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.FunctionScopeInfo.ScopeType">
            <summary>
            Null if this is a row scope, but if it's a constant row scope this will
            be the constant scope of the function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.IFunction.Name">
            <summary>
            The locale-specific name of the function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.IFunction.QualifiedName">
            <summary>
            The function's fully qualified name, including the namespace.
            If the function is in the global namespace, Function.QualifiedName is the same as Function.Name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.IFunction.Description">
            <summary>
            A description associated with this function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.IFunction.HelpLink">
            <summary>
            External link to function help.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.IFunction.FunctionCategoriesMask">
            <summary>
            The categories of the function.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Functions.SignatureConstraint">
            <summary>
            This class is used to help limit signature length for variadic function. e.g.
            FuncName(arg1,arg1,...,arg1,...),
            FuncName(arg1,arg2,arg2,...,arg2,...)
            FuncName(arg1,arg2,arg1,arg2,...,arg1,arg2,...)
            FuncName(arg1,arg2,arg2,...,arg2,...,arg3,...)
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.SignatureConstraint.ArgNeedsHighlight(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if argIndex needs highlight.
            </summary>
            <param name="argCount">arg count in script.</param>
            <param name="argIndex">arg index cursor focuses on in script.</param>
            <param name="signatureCount">arg count in signature.</param>
            <param name="signatureIndex">signature index in funcDisplayString.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.SignatureConstraint.CanParamOmit(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if param can omit.
            </summary>
            <param name="argCount">arg count in script.</param>
            <param name="argIndex">arg index cursor focuses on in script.</param>
            <param name="signatureCount">arg count in signature.</param>
            <param name="signatureIndex">signature index in funcDisplayString.</param>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.HasPreciseErrors">
            <summary>
            Whether the function always produces a visible error if CheckInvocation returns invalid.
            This can be used to prevent the overall "Function has invalid arguments" error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.RequireAllParamColumns">
            <summary>Indicates whether table and record param types require all columns to be specified in the input argument.</summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.ModifiesValues">
            <summary>
            Indicates whether the function sets a value.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.Name">
            <summary>
            The function's name as surfaced in / accessible from the language.
            Using properties instead of fields here, to account for the fact that subclasses may override LocaleSpecificName.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.LocaleSpecificName">
            <summary>
            The function's locale-specific name.
            These should all be defined in the string resources, e.g. Abs_Name, Filter_Name, etc.
            The derived classes can pass in the value if needed and in that case, the passed in value is directly used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.SignatureConstraint">
            <summary>
            Might need to reset if Function is variadic function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.ScopeInfo">
            <summary>
            Gives information for scope if the function has scope. If this is null,
            the function does not involve row scope.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.PostVisitValidation(Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Syntax.CallNode)">
            <summary>
            True if there was any custom post-visit validation errors applied for this function.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.IsLazyEvalParam(System.Int32)">
            <summary>
            True if the evaluation of the param at the 0-based index is controlled by the function in question
            e.g. conditionally evaluated, repeatedly evaluated, etc.., false otherwise
            All lambda params are Lazy, but others may also be, including short-circuit booleans, conditionals, etc..
            </summary>
            <param name="index">Parameter index, 0-based.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.TryGetEntityMetadata(Microsoft.PowerFx.Syntax.CallNode,Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Core.Functions.Delegation.IDataEntityMetadata@)">
            <summary>
            Provides dataentitymetadata for a callnode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.TryGetEntityMetadata(Microsoft.PowerFx.Syntax.CallNode,Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Core.Functions.Delegation.IDelegationMetadata@)">
            <summary>
            Provides delegationmetadata for a callnode. It's used by delegable functions to get delegation metadata. For example, Filter, Sort, SortByColumns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.GetTabularDataSourceArg(Microsoft.PowerFx.Syntax.CallNode)">
            <summary>
            Gets TexlNodes of function argument that need to be processed for tabular datasource
            E.g. Filter function will have first argument node that will be associated with tabular datasource,
            however With function will have Record type argument that can hold multiple datasource type columns
            Functions that have datasource arguments in places ither than first argument need to override this.
            </summary>
            <param name="callNode">Function Texl Node.</param>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Functions.TexlFunction.SkipScopeForInlineRecords">
            <summary>
            If true, the scope this function creates isn't used for field names of inline records.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Functions.TexlFunction.DropAttachmentsIfExists(Microsoft.PowerFx.Core.Types.DType@,Microsoft.PowerFx.Core.App.ErrorContainers.IErrorContainer,Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            Removes the Attachments field from <paramref name="itemType"/> if it is defined and returns true if
            successful and false if an error was present.  If the Attachments field is not defined, does nothing
            and returns true.
            </summary>
            <remarks>
            We ignore the Attachments field on all types in the invocation because it is a special column that
            is delay loaded.  It is stripped from the type when used in functions like Set and is ignored in
            Collect.CheckInvocation.
            </remarks>
            <param name="itemType">Type that may define Attachments.</param>
            <param name="errors">Errors.</param>
            <param name="node">Node to which <paramref name="itemType"/> is associated.</param>
            <returns>
            True if operation succeeded, if no Attachments field is defined or the Attachments field
            has been successfully removed from <paramref name="itemType"/>, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Glue.IBinderGlue">
            <summary>
            A class that exists solely to provide an inactive stub for the
            Language-side binder. This resolves static dependencies on App related
            code that may exist, which we don't want to move over to Language even
            temporarily.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Glue.SimpleResolver">
            <summary>
            Basic implementation of INameResolver around a <see cref="T:Microsoft.PowerFx.PowerFxConfig"/> object. 
            This aides in binding and intellisense. 
            Host can override Lookup to provide additional symbols to the expression. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Glue.SimpleResolver.#ctor(Microsoft.PowerFx.PowerFxConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Core.Glue.SimpleResolver"/> class.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.IR.CoercionMatrix.GetToEnumCoercion(Microsoft.PowerFx.Core.Types.DType,Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Resolves the coercion type for any type to a type with <see cref="F:Microsoft.PowerFx.Core.Types.DKind.Enum"/> kind.
            </summary>
            <param name="fromType">
            Type that is being coerced to an enum type.
            </param>
            <param name="toType">
            An enum type that a value of <paramref name="fromType"/> is being coerced to.
            </param>
            <returns>
            The result will generally resemble the coercion kind whose meaning resembles "fromType to
            toType.EnumSuperKind", but with special cases evident within.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.IR.IRTranslator.Translate(Microsoft.PowerFx.Core.Binding.TexlBinding)">
            <summary>
            Returns the top node of the IR tree, and a symbol that corresponds to the Rule Scope.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.IR.Nodes.AggregateCoercionNode">
            <summary>
            For Record->Record and Table->Table, provides coercions for individual fields, potentially recursively.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.IR.Nodes.CallNode.Scope">
            <summary>
            Scope is non-null if the function creates a scope.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.IR.Nodes.IntermediateNode.Accept``2(Microsoft.PowerFx.Core.IR.IRNodeVisitor{``0,``1},``1)">
            <summary>
            This method visits the node using the visitor and context provided.
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="visitor">Visitor to use.</param>
            <param name="context">Context.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.IR.Nodes.LazyEvalNode">
            <summary>
            Wraps an child IR Node that is evaluated on-demand by the LazyEval node's parent.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.IR.Nodes.ScopeAccessNode.Value">
            <summary>
            Either a ScopeSymbol or a ScopeAccessSymbol
            A ScopeSymbol here represents access to the whole scope record,
            A ScopeAccessSymbol here represents access to a single field from the scope.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.IR.Symbols.IScopeSymbol">
            <summary>
            This is just a tag interface
            Cast to <see cref="T:Microsoft.PowerFx.Core.IR.Symbols.ScopeSymbol"/> or <see cref="T:Microsoft.PowerFx.Core.IR.Symbols.ScopeAccessSymbol"/>
            before using.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Localization.ErrorResourceKey">
            <summary>
            Key Type of string resources related to errors. 
            Used by BaseError in DocError.cs to ensure that it is passed a key as opposed to a generic string, such as the contents of the error message. 
            Existing keys for error messages are split between here (for general document errors) and Strings.cs (for Texl errors).
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Localization.IExternalStringResources">
            <summary>
            This interface is used by Canvas apps to pass in an interface to access strings for keys that are resolved later by PowerFx.
            Ideally it would be removed, but separating this is tricky, and this allows PowerFx to stand on its own. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Localization.INamedLanguageSettings">
            <summary>
                A language settings abstraction tied to a specific culture name.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Localization.InvalidXmlException">
            <summary>
            Represents an exception that occurs while reading and validating an xml document.
            It's intended to be safe to display the message back to the user.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Localization.InvalidXmlException.#ctor(System.String)">
            <param name="reason">The user-friendly reason why the xml document is invalid.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Localization.LanguageSettings">
            <summary>
            Language Settings class encapsulates essential details related to a specific
            loc + glob environment.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Localization.StringResources.ExternalStringResources">
            <summary>
             This field is set once on startup by Canvas' Document Server, and allows access to Canvas-specific string keys
             It is a legacy use, left over from when PowerFx was deeply embedded in Canvas, and ideally should be removed if possible.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Logging.ISanitizedNameProvider.TrySanitizeIdentifier(Microsoft.PowerFx.Syntax.Identifier,System.String@,Microsoft.PowerFx.Syntax.DottedNameNode)">
            <summary>
            Attempt to sanitize an identifier using a custom sanitization scheme.
            </summary>
            <param name="identifier">The identifer.</param>
            <param name="sanitizedName">The sanitized name output.</param>
            <param name="dottedNameNode">The dotted name node, optional.</param>
            <returns>Whether the custom sanitization should be used.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Parser.ParserExtensions">
            <summary>
            Parser Extensions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.DisplayNameProvider.TryRemapLogicalAndDisplayNames(Microsoft.PowerFx.Core.Utils.DName,Microsoft.PowerFx.Core.Utils.DName@,Microsoft.PowerFx.Core.Utils.DName@)">
            <summary>
            This function attempts to remap logical and display names given a display name.
            It's used for scenarios where display names are changed under the hood while the expression is in display name format already.
            This is a legacy Canvas app behavior, and should not be supported implemented by non-canvas hosts.
            If this isn't supported by a given display name provider, this should return the same as 
            <see cref="M:Microsoft.PowerFx.Core.DisplayNameProvider.TryGetLogicalName(Microsoft.PowerFx.Core.Utils.DName,Microsoft.PowerFx.Core.Utils.DName@)"/>, with the newDisplayName output populated by the first arg. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.DisplayNameUtility">
            <summary>
            Utilities for working with Display Names in Power Fx.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.DisplayNameUtility.MakeUnique(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            PowerFx Display Names are required to be unique with respect to other display names in the same type,
            as well as the logical names of that type. This helper ensures that display names are unique, by rewriting to 
            `Display (logical)` for all colliding names. If uniqueness cannot be found, we fall back on using
            logical names as display names for all fields.
            </summary>
            <param name="logicalToDisplayPairs">Enumerable of (logical, display) pairs.</param>
            <returns>Enumerable of unique (logical, display) pairs.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.RenameDriver.ApplyRename(System.String)">
            <summary>
            Applies rename operation to <paramref name="expressionText"/>.
            </summary>
            <param name="expressionText">Expression in which to rename the parameter field.</param>
            <returns>Expression with rename applied.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Public.GetTokensFlags">
             <summary>
             Get tokens flags
            
             This is used in the following:
              1. Client sends didOpen with "getTokensFlags=3" (UsedInExpression and AllFunctions)
              2. Server sends publishTokens with all supported functions + tokens in existing formula
              3. Client updates normalizedCompletionLookup, which is used in monacoParam.languages.registerOnTypeFormattingEditProvider to do auto case correction
              4. Client updates tokenizer (which maps token to theme color) for syntax highlighting
              5. When formula changes in client, client sends didChange with "getTokensFlags=1" (UsedInExpression)
              6. Server sends publishTokens with tokens in existing formula
              7. Client updates normalizedCompletionLookup and tokenizer.
             </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Public.GetTokensFlags.None">
            <summary>
            No token
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Public.GetTokensFlags.UsedInExpression">
            <summary>
            Tokens only used in the given expression
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Public.GetTokensFlags.AllFunctions">
            <summary>
            All available functions can be used
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.FormulaTypeSchema.Type">
            <summary>
            Represents the type of this item. For some complex types, additional optional data is required.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.FormulaTypeSchema.Fields">
            <summary>
            Optional. For Records and Tables, contains the list of fields.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.FormulaTypeSchema.Required">
            <summary>
            Optional. Used for external schema definitions and input validation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.FormulaTypeSchema.TableLogicalName">
            <summary>
            Optional. For entities, specifies the table logical name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.FormulaTypeSchema.OptionSetName">
            <summary>
            Optional. For Option Set Values, specifies the option set logical name.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Texl.Builtins.SwitchFunction">
            <summary>
            SwitchFunction evaluates first argument (clled the expression) against a list of values,
            and returns the result corresponding to the first matching value. If there is no match,
            an optional default value(which is last argument if number of arguments are even) is returned.
            Syntax:
            Switch(Value to switch,Value to match 1...[2-N], Value to return for match1...[2-N], [Value to return if there's no match]).
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Texl.Builtins.WithFunction.GetTabularDataSourceArg(Microsoft.PowerFx.Syntax.CallNode)">
            <summary>
            With function has special syntax where datasource can be provided as scope parameter argument.
            </summary>
            <param name="node"></param>
            <returns>TexlNode for argument that can be used to determine tabular datasource.</returns>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Texl.Intellisense.IIntellisenseContext.InputText">
            <summary>
            The input string for intellisense.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Texl.Intellisense.IIntellisenseContext.CursorPosition">
            <summary>
            Cursor position for the intellisense input string.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Texl.ViewFilterDataSourceVisitor">
            <summary>
            This visitor is used to walkthrough the first node of a filter to get the datasource name and
            whether or not there is any other filter sub expression that uses a view.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Texl.ViewFinderVisitor">
            <summary>
            This visitor is used to walkthrough the tree to check the existence of a view.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.DType.AreFieldsOptional">
            <summary>
            The last parameter type of service functions is a record.  The fields of this argument do not have to
            be defined in order for an invocation to correctly type check.  The individual field types must match
            the expected type exactly, however, so it is necessary to set this value for a single aggregate DType
            and not for the individual field types within.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.DType.NamedValueKind">
            <summary>
            NamedValueKind is used only for values of kind NamedValue
            It is a restriction on what variety of named value it actually is
            Semantically, NamedValues of a given kind only interact with other ones of the same Kind
            Null for non-named value DTypes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.DType.IsUniversal">
            <summary>
             Whether this type is a subtype of all possible types, meaning that it can be placed in
             any location without coercion.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.ReplaceDisplayNameProvider(Microsoft.PowerFx.Core.Types.DType,Microsoft.PowerFx.Core.DisplayNameProvider)">
            <summary>
            This should only be used when constructing DTypes from the public surface to replace an existing display name provider.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.AttachOrDisableDisplayNameProvider(Microsoft.PowerFx.Core.Types.DType,Microsoft.PowerFx.Core.DisplayNameProvider)">
            <summary>
            This should be used by internal operations to update the set of display name providers associated with a type, i.e. during Union operations.
            Display name providers are disabled if there's a conflict with an existing provider.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.GetKindString">
            <summary>
            Get the string form representation for the Kind to be displayed in the UI.
            </summary>
            <returns>String representation of DType.Kind.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.ContainsDataEntityType(Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Returns true if type contains a entity type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.ContainsAttachmentType(Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Returns true if type contains an attachment type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.IsMultiSelectOptionSet">
            <summary>
            Returns true if type contains an OptionSet type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.Accepts(Microsoft.PowerFx.Core.Types.DType,System.Boolean,System.Boolean)">
            <summary>
            Returns whether this type can accept a value of "type".
            For example, a table type can accept a table type containing extra fields.
            <br/> - type1.Accepts(type2) is the same as asking whether type2==type1 or type2 is a sub-type of type1.
            <br/> - Error accepts any type.
            <br/> - Any type accepts Unknown.
            <br/> If not in 'exact' mode (i.e. if exact=false), we permit downcasting as well; for
            example a table type will accept a table with less fields.
            </summary>
            <param name="type">
            Type of questionable acceptance.
            </param>
            <param name="exact">
            Whether or not <see cref="T:Microsoft.PowerFx.Core.Types.DType"/>'s absense of columns that are defined in <paramref name="type"/>
            should affect acceptance.
            </param>
            <param name="useLegacyDateTimeAccepts"></param>
            <returns>
            True if <see cref="T:Microsoft.PowerFx.Core.Types.DType"/> accepts <paramref name="type"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.Accepts(Microsoft.PowerFx.Core.Types.DType,System.Collections.Generic.KeyValuePair{System.String,Microsoft.PowerFx.Core.Types.DType}@,Microsoft.PowerFx.Core.Types.DType@,System.Boolean,System.Boolean)">
            <summary>
            Returns whether this type can accept a value of "type".
            For example, a table type can accept a table type containing extra fields.
            <br/> - type1.Accepts(type2) is the same as asking whether type2==type1 or type2 is a sub-type of type1.
            <br/> - Error accepts any type.
            <br/> - Any type accepts Unknown.
            <br/> If not in 'exact' mode (i.e. if exact=false), we permit downcasting as well; for
            example a table type will accept a table with less fields.
            </summary>
            <param name="type">
            Type of questionable acceptance.
            </param>
            <param name="schemaDifference">
            Holds the expected type of a type mismatch as well as a field name if the mismatch is aggregate.
            If the mismatch is top level, the key of this kvp will be set to null.
            </param>
            <param name="schemaDifferenceType">
            Holds the actual type of a type mismatch.
            </param>
            <param name="exact">
            Whether or not <see cref="T:Microsoft.PowerFx.Core.Types.DType"/>'s absense of columns that are defined in <paramref name="type"/>
            should affect acceptance.
            </param>
            <param name="useLegacyDateTimeAccepts"></param>
            <returns>
            True if <see cref="T:Microsoft.PowerFx.Core.Types.DType"/> accepts <paramref name="type"/>, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.TryGetConvertedDisplayNameAndLogicalNameForColumn(Microsoft.PowerFx.Core.Types.DType,System.String,System.String@,System.String@)">
            <summary>
            Returns true iff <paramref name="displayName"/> was found within <paramref name="type"/>'s old display
            name mapping and sets <paramref name="logicalName"/> and <paramref name="newDisplayName"/>
            according to the new mapping.
            </summary>
            <param name="type">
            Type the mapping within which to search for old display name and from which to produce new
            display name.
            </param>
            <param name="displayName">
            Display name used to search.
            </param>
            <param name="logicalName">
            Will be set to <paramref name="displayName"/>'s corresponding logical name if
            <paramref name="displayName"/> exists within <paramref name="type"/>'s old mapping.
            </param>
            <param name="newDisplayName">
            Will be set to <paramref name="logicalName"/>'s new display name if
            <paramref name="displayName"/> exists within <paramref name="type"/>'s old mapping.
            </param>
            <returns>
            Whether <paramref name="displayName"/> exists within <paramref name="type"/>'s previous display name map.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.IsMatchingExpandType(Microsoft.PowerFx.Core.Types.DType,Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Checks whether actualColumnType in table is matching related entity type in expectedColumnType.
            E.g. Collection definition rule => Collect(newCollection, Accounts);
            Above rule will define new collection with schema from Accounts datasource
            Adding new rule that populates collection with lookup data like below
            Collection populatin rule => Collect(newCollection, {'Primary Contact':First(Contacts)});
            Above rule is collecting new data record with data in lookup fields.
            </summary>
            <param name="expectedColumnType">expected type in collection definition for 'Primary Contact' column is entity of expand type.</param>
            <param name="actualColumnType">actual column provide in data collection rule is record of entity matching expand type.</param>
            <returns>true if actual column type is Entity type matching Expand entity, false O.W.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.ToJsType(System.Func{Microsoft.PowerFx.Core.Utils.DName,Microsoft.PowerFx.Core.Types.DType,System.Boolean})">
            <summary>
            Returns a JS representation of this DType.
            </summary>
            <returns>A JS representation of this DType.</returns>
            <remarks>The representation is an object with a required member 't', of type string
            (which maps to the _kind property) and an optional member 'c', of type object, with
            keys named on the children properties for this DType, and values representing their
            respective JS type:
            export interface IJsonFunctionDataDefinition {
                t: string;   // Type (maps to DType.Kind)
                c?: HashTable.IJsonFunctionDataDefinition; // optional children
            }.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.DType.ContainsControlType(Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Returns true if type contains a control type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.DTypeInfo.IsTruncated">
            <summary>
            Indicates if the DType represents a truncated schema.
            This would indicate a loop in a type tree or that the originating schema has a depth larger
            than the 'max schema depth' supported by the schema computation function.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.Enums.EnumStoreBuilder">
            <summary>
            Static class used to store built in Power Fx enums.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol">
            <summary>
            Entity info that respresents an enum, such as "Align" or "Font".
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol.Name">
            <summary>
            The variant name for the enum.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol.TryLookupValueByLocName(System.String,System.String@,System.Object@)">
            <summary>
            Look up an enum value by its locale-specific name.
            For example, locName="Droit" --> invName="Right", value="right".
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol.TryGetInvariantValueName(System.String,System.String@)">
            <summary>
            Get the invariant enum value name corresponding to the given locale-specific name.
            For example, locName="Droit" --> invName="Right"For example, locName="Droit" --> invName="Right".
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol.TryGetLocValueName(System.String,System.String@)">
            <summary>
            Get the locale-specific enum value name corresponding to the given invariant name.
            Note: This value is not localized currently, as we do not localized the language.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol.TryGetDisplayLocValueName(System.String,System.String@)">
            <summary>
            Gets the locale-specific display value for the enum value corresponding to the given invariant name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Types.ErrorType.ReifiedErrorSchema">
            <returns>
            The schema for an error value.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.ErrorType.ReifiedError">
            <returns>
            The <see cref="T:Microsoft.PowerFx.Core.Types.DType"/> of an error value.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Types.ErrorType.ReifiedErrorTable">
            <returns>
            The <see cref="T:Microsoft.PowerFx.Core.Types.DType"/> of a collection of error values.
            </returns>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.FieldNameKind">
            <summary>
            You can refer to a field name both by a "logical" name and a "display" name. Sometimes
            it's important to distinguish which kind of name you are requesting, to avoid ambiguous
            strings.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.IExpandInfo">
            <summary>
            Information about expand entity type.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.IPolymorphicInfo">
            <summary>
            Information about polymorphic entity type, generates/stores ExpandInfo for each of its target casts.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Types.StringDistanceComparer">
            <summary>
            A comparer that orders based on the Damerau-Levenshtein distance to a given zero-point string.
            The distances are modified to be case aware: a case mismatch is 0.1 units of distance, while
            a full mismatch and an insertion or deletion are worth the normal 1 unit of distance.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.UtilityDataStructures.ChunkedList`1">
            <inheritdoc />
            <summary>
            Should be used for large collections, where reallocation is too expensive at the cost
            of a slower element access.
            Contains, Insert, Remove, RemoveAt and IndexOf are not support on this collection.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.UtilityDataStructures.LazyList`1">
            <summary>
            Allows the accumulation of a large number of individual elements,
            which can then be combined into a single collection at the end of
            the operation without the creation of many intermediate large
            memory blocks.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.UtilityDataStructures.LazyList`1.With(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gives a new list with the given elements after the elements in this list.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.UtilityDataStructures.LazyList`1.With(`0[])">
            <summary>
            Gives a new list with the given elements after the elements in this list.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.UtilityDataStructures.LazyList`1.Of(`0[])">
            <summary>
            Create a new LazyList with the given starting set of values.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.UtilityDataStructures.LazyList`1.Of(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new LazyList with the given starting set of values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.UtilityDataStructures.StrictDictionary`2">
             <summary>
              A dictionary which disallows null values. Throws a contract error if one
              attempts to insert a null value.
            
              Generally better to use this than a plain dictionary, because persistent nulls are extremely
              difficult to debug. However, be careful about converting an existing dictionary to a strict
              dictionary, since that could change behavior. This is safe in cases where a null in the
              original dictionary would result in an almost certain crash anyway.
             </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.CharacterUtils.UniCatFlags">
            <summary>
            Bit masks of the UnicodeCategory enum. A couple extra values are defined
            for convenience for the C# lexical grammar.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.CharacterUtils.Escape(System.String)">
            <summary>
            Escapes a minimal set of characters (', \0, \b, \t, \n, \v, \f, \r, \u0085, \u2028, \u2029)
            by replacing them with their escape codes.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.DName">
            <summary>
            A string representing a valid name of a table, column or variable name.
            A valid name does not consist entirely of space characters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Core.Utils.DName"/> struct.
            </summary>
            <param name="value">The value of the name.</param>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DName.Value">
            <summary>
            The value of the name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DName.IsValid">
            <summary>
            Whether the name is valid.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.op_Implicit(Microsoft.PowerFx.Core.Utils.DName)~System.String">
            <summary>
            String representation of the name value.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.Equals(Microsoft.PowerFx.Core.Utils.DName)">
            <summary>
            Whether two names are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.Equals(System.String)">
            <summary>
            Whether the name is equal to a string value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.IsValidDName(System.String)">
            <summary>
            Returns whether the given name is a valid <see cref="T:Microsoft.PowerFx.Core.Utils.DName" />. 
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DName.MakeValid(System.String,System.Boolean@)">
            <summary>
            Takes a name and makes it into a valid <see cref="T:Microsoft.PowerFx.Core.Utils.DName" />.
            If the name contains all spaces, an underscore is prepended to the name.
            </summary>
            <param name="strName"></param>
            <param name="fModified">Whether it had to be changed to be a valid <see cref="T:Microsoft.PowerFx.Core.Utils.DName" />.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.DPath">
            <summary>
            A list of simple names (<see cref="T:Microsoft.PowerFx.Core.Utils.DName" />), starting at "root" (<see cref="P:Microsoft.PowerFx.Core.Utils.DPath.Root" />).
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DPath.Root">
            <summary>
            The "root" path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DPath.IsValid">
            <summary>
            Whether this path is valid.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DPath.Length">
            <summary>
            The length (number of simple names) of the path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.DPath.Item(System.Int32)">
            <summary>
            A name at some index.
            </summary>
            <param name="index">Index of the name in the path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.Append(Microsoft.PowerFx.Core.Utils.DName)">
            <summary>
            Creates a new path by appending a new simple name.
            </summary>
            <param name="name">The simple name to append.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.Append(Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Creates a new path by appending another path to this one.
            </summary>
            <param name="path">The path to append.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.ToDottedSyntax">
            <summary>
            Converts this path to a dotted syntax (e.g., Name1.Name2...)
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.Segments">
            <summary>
            A sequence of name segments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.op_Equality(Microsoft.PowerFx.Core.Utils.DPath,Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Check whether two paths are equal.
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.op_Inequality(Microsoft.PowerFx.Core.Utils.DPath,Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Check whether two paths are not equal.
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.Equals(Microsoft.PowerFx.Core.Utils.DPath)">
            <summary>
            Whether this path is equal to another path.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.DPath.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.TempFile">
            <summary>
            Return a full path for a temporary file, and delete it at Dispose.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.TempDir">
            <summary>
            Return a unique temporary directory and delete it at Dispose.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.FormulaSet">
            <summary>
            A set of name/formula paris, which creates and updates a topologically-sorted list
            of name/formula pairs.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.FormulaSet.SortedFormulas">
            <summary>
            A topologically-sorted list of name/formula pairs. This property is regenerated every time
            the formula set is modified.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.FormulaSet.Cycles">
            <summary>
            Formulas that failed to topologically sort because of cycles.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.FormulaSet.#ctor(Microsoft.PowerFx.Core.Utils.IDependencyFinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Core.Utils.FormulaSet"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.FormulaSet.Add(System.String,Microsoft.PowerFx.FormulaWithParameters)">
            <summary>
            Add an item and regenerate the sorted list. Throws InvalidOperationException for circular dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.FormulaSet.Add(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.PowerFx.FormulaWithParameters}})">
            <summary>
            Add a range of items and regenerate the sorted list. Throws InvalidOperationException for circular dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.FormulaSet.Remove(System.String)">
            <summary>
            Remove an item and regenerate the sorted list.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.FormulaSet.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove a range of items and regenerate the sorted list.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Hashing.HashString(System.String)">
            <summary>
            Hash the characters in a string.
            </summary>
            <param name="str">The string instance to hash.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.IDependencyFinder">
            <summary>
            Exposes the ability parse a formula, walk the tree and return a list of dependencies
            or variable names as strings.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.IDependencyFinder.FindDependencies(Microsoft.PowerFx.FormulaWithParameters)">
            <summary>
            Given a formula, create a list of dependencies or variable names as a
            set of strings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.LanguageConstants.SortOrderEnumString">
            <summary>
            The string value representing SortOrder enum.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Utils.LanguageConstants.AscendingSortOrderString">
            <summary>
            Defines ascending sort order string constant.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Utils.LanguageConstants.DescendingSortOrderString">
            <summary>
            Defines descending sort order string constant.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Utils.LanguageConstants.InvariantCalendarNamespace">
            <summary>
            The string value representing the locale invariant calendar function namespace.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Core.Utils.LanguageConstants.InvariantClockNamespace">
            <summary>
            The string value representing the locale invariant clock function namespace.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Core.Utils.LanguageConstants.SortOrderEnumStringInvariant">
            <summary>
            The invariant string value representing SortOrder enum.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.StringBuilderCache`1">
            <summary>
            It provides a cached reusable <see cref="T:System.Text.StringBuilder"/> instance per thread.
            This optimization reduces the number of instances constructed and collected.
            <br/>
            Class specialization prevents other components from sharing the same <see cref="T:System.Text.StringBuilder"/>
            instance in the current thread.
            </summary>
            <remarks>
            This implementation is copied from the CLR, except this class is generic.
            It's done to allow multiple components to use their own <see cref="T:Microsoft.PowerFx.Core.Utils.StringBuilderCache`1"/> objects.
            </remarks>
            <see href="https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Text/StringBuilderCache.cs"/>
            <example>
            using SBCache = StringBuilderCache&lt;SampleClass&gt;;
            // ...
            StringBuilder sb = SBCache.Acquire(capacity: 32);
            sb.Append("sample text");
            string result = SBCache.GetStringAndRelease(sb);.
            </example>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.StringBuilderCache`1.SetMaxBuilderSize(System.Int32)">
            <summary>
            Updates the default value for the maximum cached <see cref="T:System.Text.StringBuilder"/> size.
            If the requested size is greater than this value, a new (non-cached) <see cref="T:System.Text.StringBuilder"/> instance
            is created.
            </summary>
            <see cref="M:Microsoft.PowerFx.Core.Utils.StringBuilderCache`1.Acquire(System.Int32)"/>
            <remarks>
            Prefer calling this method before any other methods from this class.
            </remarks>
        </member>
        <member name="T:Microsoft.PowerFx.Core.Utils.ICheckable">
            <summary>
            Implement this interface to add AssertValid/CheckValid validation capabilities to your class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertValueType``1(``0)">
            <summary>
            Asserts the value is a value type (i.e. a struct, enum).
            Usage of this contract allows us to detect when parameter types change and should use the AssertValue method
            instead.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertOneOf``1(``0,``0[])">
            <summary>
            Asserts that <paramref name="val"/> is not null and one of the <paramref name="expectedPossibilities"/>.
            This uses the default equality operator for the type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that <paramref name="val"/> is not null and one of the <paramref name="expectedPossibilities"/>.
            This uses the default equality operator for the type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertOneOfOrNull``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that <paramref name="val"/> is not null and one of the <paramref name="expectedPossibilities"/>.
            This uses the default equality operator for the type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertAllOneOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that each value in <paramref name="values"/> is not null and one of the <paramref name="expectedPossibilities"/>.
            This uses the default equality operator for the type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertNullOrOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that <paramref name="val"/> is null OR one of the <paramref name="expectedPossibilities"/>.
            This uses the default equality operator for the type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertAllNonEmpty(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <param name="args">Warning: this IEnumerable should not be read-once or it will cause side effects.</param>
            <param name="msg"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.AssertAllNonEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <param name="args">Warning: this IEnumerable should not be read-once or it will cause side effects.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Core.Utils.Contracts.Size``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Note: This will actualize the IEnumerable. Care should be taken to only use this when the list is not read-once.</summary>
        </member>
        <member name="T:Microsoft.PowerFx.ErrorSeverity">
            <summary>
            Severity of errors provided.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Verbose">
            <summary>
            A suggestion about possible high-level improvements or refactoring that may help the user
            get a better app experience.
            Examples: performance changes
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Suggestion">
            <summary>
            A suggestion about possible improvements or refactoring that may help the user
            get a better app experience.
            Examples: refactoring suggestions.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Warning">
            <summary>
            A warning about a potential problem. These will typically not prevent normal rule execution.
            Examples: certain type errors/warnings.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Moderate">
            <summary>
            A moderate error that may prevent rules from executing properly.
            Examples: Service unavailable, service schema changed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Severe">
            <summary>
            A severe error that will likely prevent rules from executing properly.
            This type of errors prevents generation of code and publishing.
            Examples: invocation of unknown functions, invalid names, certain type errors.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.ErrorSeverity.Critical">
            <summary>
            A critical error, e.g. an error that prevents rules from executing properly.
            This type of errors prevent generation of code and publishing.
            Example: syntax errors.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Preview.FeatureFlags">
            <summary>
            Hosts can enable these flags to try out early features. 
            Any flags will eventually default to true and then get removed once the feature is finalized. 
            Removing a flag is a breaking change and requires a semver update. 
            Flags can only be set once. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Preview.FeatureFlags.StringInterpolation">
            <summary>
            Enable String Interpolation feature. 
            Added 12/3/2021.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.BinaryOp">
            <summary>
            Kinds of binary operators.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Or">
            <summary>
            Logical disjunction (||).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.And">
            <summary>
            Logical conjunction (&amp;&amp;).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Concat">
            <summary>
            String concatenation (&amp;).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Add">
            <summary>
            Arithmetic addition (+).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Mul">
            <summary>
            Arithmetic multiplication (*).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Div">
            <summary>
            Arithmetic division (/).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Power">
            <summary>
            Arithmetic exponentiation (^).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Equal">
            <summary>
            Equal to comparison (=).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.NotEqual">
            <summary>
            Not equal to comparison (&lt;&gt;).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Less">
            <summary>
            Less than comparison (&lt;).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.LessEqual">
            <summary>
            Less than or equal to comparison (&lt;=).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Greater">
            <summary>
            Greater than comparison (&gt;).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.GreaterEqual">
            <summary>
            Greater than or equal comparison (&gt;=).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.In">
            <summary>
            Substring (case-insensitive) or collection/table membership test.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Exactin">
            <summary>
            Substring (case-sensitive) or collection/table membership test.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.BinaryOp.Error">
            <summary>
            Binary operator parsing error.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlLexer.LexerImpl.Dispatch(System.Boolean,System.Boolean)">
            <summary>
            Forms a new token.
            </summary>
            <param name="allowContextDependentTokens">Enables the <c>%text%</c> expression support.</param>
            <param name="allowLocalizableTokens">Enables the <c>##text##</c> expression support.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.CommentToken">
            <summary>
            Token for a comment.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.CommentToken.Value">
            <summary>
            Content of the comment.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.EofToken.#ctor(Microsoft.PowerFx.Syntax.EofToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.EofToken"/> class.
            Copy Ctor for EofToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.ErrorToken">
            <summary>
            Token for lexing error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.ErrorToken.DetailErrorKey">
            <summary>
            Errors description key.
            May produce null, if there is no available detail for this error token.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ErrorToken.#ctor(Microsoft.PowerFx.Syntax.ErrorToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.ErrorToken"/> class.
            Copy Ctor for ErrorToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ErrorToken.Equals(Microsoft.PowerFx.Syntax.Token)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.IdentToken">
            <summary>
            Token for an identifier/name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.IdentToken.Name">
            <summary>
            Identifier represented as <see cref="T:Microsoft.PowerFx.Core.Utils.DName" />.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentToken.#ctor(Microsoft.PowerFx.Syntax.IdentToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.IdentToken"/> class.
            Copy Ctor for IdentToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.IdentToken.HasErrors">
            <summary>
            Whether an identifier has errors.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentToken.MakeValidIdentifier(System.String)">
            <summary>
            Converts a string value of an identifier to a valid identifier (e.g., "a b" -> "'a b'").
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Throw if value is <c>null</c>.</exception>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentToken.Equals(Microsoft.PowerFx.Syntax.Token)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.KeyToken.#ctor(Microsoft.PowerFx.Syntax.KeyToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.KeyToken"/> class.
            Copy Ctor for KeyToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.NumLitToken">
            <summary>
            Token for a numeric literal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NumLitToken.#ctor(Microsoft.PowerFx.Syntax.NumLitToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.NumLitToken"/> class.
            Copy Ctor for NumLitToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.NumLitToken.Value">
            <summary>
            Numeric value of the token.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NumLitToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NumLitToken.Equals(Microsoft.PowerFx.Syntax.Token)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.StrLitToken">
            <summary>
            Token for a string literal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitToken.#ctor(Microsoft.PowerFx.Syntax.StrLitToken,Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.StrLitToken"/> class.
            Copy Ctor for StrLitToken used by Clone.
            </summary>
            <param name="tok">The token to be copied.</param>
            <param name="newSpan">The new span.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitToken.ToString">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.StrLitToken.Value">
            <summary>
            Value of the string literal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitToken.EscapeString(System.String)">
            <summary>
            Escapes a string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitToken.Equals(Microsoft.PowerFx.Syntax.Token)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.Token">
            <summary>
            Base class for all lexing tokens.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Token.Kind">
            <summary>
            Kind of the token.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Token.Span">
            <summary>
            Span of the token in the formula.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Token.As``1">
            <summary>
            Asserts that the object is in fact of type T before casting.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Token.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Token.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Token.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Token.Equals(Microsoft.PowerFx.Syntax.Token)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.PowerFx.Syntax.Token" /> is equal to the current one.
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.WhitespaceToken">
            <summary>
            A token for a series of whitespace characters.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.TokKind">
            <summary>
            Kinds of tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Eof">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Error">
            <summary>
            Unknown/lexing error.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Ident">
            <summary>
            Identifier/name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.NumLit">
            <summary>
            Numeric literal.
            <code>3.14</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.StrLit">
            <summary>
            String literal.
            <code>"Hello world"</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Comment">
            <summary>
            Comment.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Whitespace">
            <summary>
            Whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Add">
            <summary>
            Addition.
            <code>+</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Sub">
            <summary>
            Subtraction.
            <code>-</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Mul">
            <summary>
            Multiplication.
            <code>*</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Div">
            <summary>
            Division.
            <code>/</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Caret">
            <summary>
            Power/exponentiation.
            <code>^</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.ParenOpen">
            <summary>
            Open parenthesis.
            <code>(</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.ParenClose">
            <summary>
            Closed parenthesis.
            <code>)</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.CurlyOpen">
            <summary>
            Open curly brace.
            <code>{</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.CurlyClose">
            <summary>
            Closed curly brace.
            <code>}</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.BracketOpen">
            <summary>
            Open bracket.
            <code>[</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.BracketClose">
            <summary>
            Closed bracket.
            <code>]</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Equ">
            <summary>
            Equals.
            <code>=</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Lss">
            <summary>
            Less than.
            <code>&lt;</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.LssEqu">
            <summary>
            Less than or equal.
            <code>&lt;=</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Grt">
            <summary>
            Greater than.
            <code>&gt;</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.GrtEqu">
            <summary>
            Greater than or equal.
            <code>&gt;=</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.LssGrt">
            <summary>
            Less than or greater than.
            <code>&lt;&gt;</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Comma">
            <summary>
            Comma.
            <code>,</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Dot">
            <summary>
            Dot.
            <code>.</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Colon">
            <summary>
            Colon.
            <code>:</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Ampersand">
            <summary>
            Ampersand (concatenation).
            <code>&amp;</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.PercentSign">
            <summary>
            Percent sign.
            <code>%</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Semicolon">
            <summary>
            Semicolon.
            <code>;</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.At">
            <summary>
            At symbol.
            <code>@</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Or">
            <summary>
            Or operator.
            <code>||</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.And">
            <summary>
            And operator
            <code>&amp;&amp;</code>.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Bang">
            <summary>
            Bang (not).
            <code>!</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.True">
            <summary>
            Boolean true constant.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.False">
            <summary>
            Boolean false constant.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.In">
            <summary>
            In keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Exactin">
            <summary>
            Exact in keyword.
            <code>exactin</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Self">
            <summary>
            Self identifier.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.Parent">
            <summary>
            Parent identifier.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.KeyOr">
            <summary>
            Or keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.KeyAnd">
            <summary>
            And keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.KeyNot">
            <summary>
            Not keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.As">
            <summary>
            As keyword.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.StrInterpStart">
            <summary>
            Start of the string interpolation.
            <code>$"</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.StrInterpEnd">
            <summary>
            End of the string interpolation.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.IslandStart">
            <summary>
            Start of the string interpolation part (island).
            <code>{</code>
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.TokKind.IslandEnd">
            <summary>
            End of the string interpolation part (island).
            <code>}</code>
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.UnaryOp">
            <summary>
            Kinds of unary operators.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.UnaryOp.Not">
            <summary>
            Logical negation (!).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.UnaryOp.Minus">
            <summary>
            Arithmetic subtraction and sign (-).
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.UnaryOp.Percent">
            <summary>
            Percentage (%).
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.VariadicOp">
            <summary>
            Kinds of variadic operators.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.VariadicOp.Chain">
            <summary>
            Formula chaining (;).
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.Span">
            <summary>
            Span in the text formula.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Span.Min">
            <summary>
            Start index of this span.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Span.Lim">
            <summary>
            End index of this span.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Span.GetFragment(System.String)">
            <summary>
            Get fragment of the text denoted by this span.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Span.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Span.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.Span.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.Formula">
            <summary>
            This encapsulates a Texl formula, its parse tree and any parse errors. Note that
            it doesn't include TexlBinding information, since that depends on context, while parsing
            does not.
            This a <see cref="T:Microsoft.PowerFx.ParseResult"/> plus the original expression text. 
            This is also used by intellisense. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.Identifier">
            <summary>
            The identifier during parsing.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Identifier.Name">
            <summary>
            The simple name of the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.Identifier.Namespace">
            <summary>
            The namespace of the identifier.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.NamedFormulas">
            <summary>
            This encapsulates a named formula: its original script, the parsed result, and any parse errors.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Syntax.NamedFormulas.Script">
            <summary>
            A script containing one or more named formulas.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NamedFormulas.#ctor(System.String,Microsoft.PowerFx.Core.Localization.ILanguageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Syntax.NamedFormulas"/> class.
            </summary>
            <param name="script"></param>
            <param name="loc"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NamedFormulas.EnsureParsed">
            <summary>
            Ensures that the named formulas have been parsed and if not, parses them.
            </summary>
            <returns>Tuple of IdentToken and formula.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NamedFormulas.GetParseErrors">
            <summary>
            Returns any parse errors.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.AsNode">
            <summary>
            As operator parse node. Example:
            
            <code>Left As Identifier</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.AsNode.Left">
            <summary>
            Left operand of the as operator.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.AsNode.Right">
            <summary>
            Right operand (identifier) of the as operator.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.AsNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.AsNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.AsNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.AsNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.BinaryOpNode">
            <summary>
            Binary operation parse node. Example:
            
            <code>Left BinaryOp Right</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BinaryOpNode.Left">
            <summary>
            Left operand of the binary operation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BinaryOpNode.Right">
            <summary>
            Right operand of the binary operation.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BinaryOpNode.Op">
            <summary>
            The binary operator.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BinaryOpNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BinaryOpNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BinaryOpNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BinaryOpNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BlankNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BlankNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BlankNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.BoolLitNode">
            <summary>
            Boolean literal parse node (true, false).
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BoolLitNode.Value">
            <summary>
            The boolean value of the literal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BoolLitNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.BoolLitNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.BoolLitNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.CallNode">
            <summary>
            Function call parse node. Example:
            
            <code>Head(Args...)</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.CallNode.Head">
            <summary>
            The identifier of the function call.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.CallNode.Args">
            <summary>
            The argument list of the function call.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.CallNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.CallNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.CallNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.CallNode.GetTextSpan">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.CallNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.DottedNameNode">
            <summary>
            Dotted identifier name parse node. Example:
            
            <code>Left.Right</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.Left">
            <summary>
            The left node of the dotted name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.Right">
            <summary>
            The right identifier of the dotted name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.UsesDot">
            <summary>
            True if the name uses dots, e.g. A.B.C.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.UsesBang">
            <summary>
            True if the name uses bangs, e.g. A!B!C.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.DottedNameNode.UsesBracket">
            <summary>
            True if the name uses brackets, e.g. A[B].
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.DottedNameNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.DottedNameNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.DottedNameNode.ToDPath">
            <summary>
            The <see cref="T:Microsoft.PowerFx.Core.Utils.DPath" /> representation of the dotted name parse node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.DottedNameNode.GetTextSpan">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.DottedNameNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.ErrorNode">
            <summary>
            Error parse node.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.ErrorNode.Message">
            <summary>
            The error message of the node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ErrorNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ErrorNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.ErrorNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.FirstNameNode">
            <summary>
            First name parse node. Example:
            
            <code>Ident</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.FirstNameNode.Ident">
            <summary>
             The identifier of the first name node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.FirstNameNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.FirstNameNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.FirstNameNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.ListNode">
            <summary>
            List expression parse node. Example:
            
            <code>[Arg1, Arg2, ...]</code>
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ListNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ListNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.ListNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.NameNode">
            <summary>
            Base class for all parse nodes representing a name/identifier.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NameNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.NumLitNode">
            <summary>
            Numeric literal parse node. Example:
            
            <code>3.14</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.NumLitNode.ActualNumValue">
            <summary>
            The numeric value of the node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NumLitNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.NumLitNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.NumLitNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.ParentNode">
            <summary>
            Parent identifier parse node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ParentNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.ParentNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.ParentNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.RecordNode">
            <summary>
            Record expression parse node.
            
            <code>{X1: E1, X2: E2, ...}</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.RecordNode.Ids">
            <summary>
            The record identifier names (i.e., field names).
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.RecordNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.RecordNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.RecordNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.RecordNode.GetTextSpan">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.RecordNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SelfNode">
            <summary>
            Self identifier parse node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.SelfNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.SelfNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.SelfNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.StrInterpNode">
            <summary>
            String interpolation parse node.
            A variadic node where each child represents a single element of the interpolation.
            
            Example:
            <code>$"Hello {name}!"</code>
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrInterpNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrInterpNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.StrInterpNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrInterpNode.GetTextSpan">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrInterpNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.StrLitNode">
            <summary>
            String literal parse node. Example:
            
            <code>"Hello world"</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.StrLitNode.Value">
            <summary>
            The string value of the literal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.StrLitNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.StrLitNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.TableNode">
            <summary>
            Table expression parse node. Example:
            
            <code>[E1, ...]</code>
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TableNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TableNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.TableNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TableNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TableNode.GetTextSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.TexlNode">
            <summary>
            Base class for all parse nodes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <summary>
            Accept a visitor <see cref="T:Microsoft.PowerFx.Syntax.TexlVisitor" />.
            </summary>
            <param name="visitor">The visitor to accept.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <summary>
            Accept a functional visitor <see cref="T:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2" />.
            </summary>
            <typeparam name="TResult">The result type of the visitor.</typeparam>
            <typeparam name="TContext">The context type of the visitor.</typeparam>
            <param name="visitor">The functional visitor to accept.</param>
            <param name="context">The context to pass to the visitor.</param>
            <returns>The result of the visitor.</returns>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.TexlNode.Kind">
            <summary>
            Kind of the parse node.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlNode.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.UnaryOpNode">
            <summary>
            Unary operation parse node. Examples:
            
            <code>Op Child</code>
            <code>Child %</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.UnaryOpNode.Child">
            <summary>
            The unary operation operand.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.UnaryOpNode.Op">
            <summary>
            The unary operator.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.UnaryOpNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.UnaryOpNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.UnaryOpNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.UnaryOpNode.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.VariadicBase">
            <summary>
            Base class for all variadic (i.e., with variable number of children) parse nodes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.VariadicBase.ChildNodes">
            <summary>
            The list of child nodes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.VariadicBase.GetCompleteSpan">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.VariadicOpNode">
            <summary>
            Variadic operation node. Example:
            
            <code>Formula1 ; Formula2 ; ...</code>
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.VariadicOpNode.Op">
            <summary>
            Variadic operator.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.VariadicOpNode.Accept(Microsoft.PowerFx.Syntax.TexlVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.VariadicOpNode.Accept``2(Microsoft.PowerFx.Syntax.TexlFunctionalVisitor{``0,``1},``1)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.VariadicOpNode.Kind">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.ITexlSource">
            <summary>
            An individual piece of the source that should be associated with a given
            TexlNode.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.SourceInformation.ITexlSource.Clone(System.Collections.Generic.Dictionary{Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Syntax.TexlNode},Microsoft.PowerFx.Syntax.Span)">
            <summary>
            Clones the contents of this piece of the source.
            </summary>
            <param name="newNodes">
            A mapping from the old nodes in this piece of the source to the
            new cloned ones. Must be complete.
            </param>
            <param name="span"></param>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.SourceInformation.ITexlSource.Tokens">
            <summary>
            All of the tokens within this piece of the source.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.SourceInformation.ITexlSource.Sources">
            <summary>
            All the pieces of source within this. This should only really be
            used by the SourceList system, as it's used to make handling the
            SpreadSource easier.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.NodeSource">
            <summary>
            A recursive reference to another node as a piece of the source for 
            its parent node.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.SourceList">
            <summary>
            A complete list of the source for a given TexlNode, given by a
            heterogeneous list of individual pieces of source.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.SourceInformation.SourceList.Sources">
            <summary>
            All the pieces of source for the holding TexlNode.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Syntax.SourceInformation.SourceList.Tokens">
            <summary>
            Every node that makes up the holding TexlNode.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.SpreadSource">
            <summary>
            A utility class for spreading a list of sources within a SourceList.
            This is immediately removed and used for its contents in the 
            construction of a SourceList or another SpreadSource.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.TokenSource">
            <summary>
            An individual non-whitespace token that is part of the source for its
            holding TexlNode.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.SourceInformation.WhitespaceSource">
            <summary>
            A series of whitespace tokens that are part of the source for the
            holding TexlNode.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.AggregateVisitor`2">
            <summary>
            A base visitor for returning results that can be easily aggregated (lists, booleans, sums).
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.DefaultVisitor`2">
            <summary>
            A base visitor for when you want a default result for most nodes.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.IdentityTexlVisitor">
            <summary>
            Visitor that by default does nothing. <seealso cref="T:Microsoft.PowerFx.Syntax.TexlVisitor" />.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.ErrorNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.BlankNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.BoolLitNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.StrLitNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.NumLitNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.FirstNameNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.ParentNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.Visit(Microsoft.PowerFx.Syntax.SelfNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.DottedNameNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.UnaryOpNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.BinaryOpNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.VariadicOpNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.StrInterpNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.CallNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.ListNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.RecordNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.TableNode)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.IdentityTexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.AsNode)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2">
            <summary>
                A visitor that passes a context to each visit method and where each visit method returns a result.
            </summary>
            <typeparam name="TResult">The results type of the visitor.</typeparam>
            <typeparam name="TContext">The context type of the visitor.</typeparam>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.ErrorNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.ErrorNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.BlankNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.BlankNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.BoolLitNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.BoolLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.StrLitNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.StrLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.NumLitNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.NumLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.FirstNameNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.FirstNameNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.ParentNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.ParentNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.SelfNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.SelfNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.StrInterpNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.StrInterpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.DottedNameNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.UnaryOpNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.UnaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.BinaryOpNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.BinaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.VariadicOpNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.VariadicOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.CallNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.CallNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.ListNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.ListNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.RecordNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.RecordNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.TableNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.TableNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlFunctionalVisitor`2.Visit(Microsoft.PowerFx.Syntax.AsNode,`1)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.AsNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <param name="context">The context passed to the node.</param>
            <returns>The node visit result.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Syntax.TexlVisitor">
            <summary>
            Abstract visitor base class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.ErrorNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.ErrorNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.BlankNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.BlankNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.BoolLitNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.BoolLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.StrLitNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.StrLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.NumLitNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.NumLitNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.FirstNameNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.FirstNameNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.ParentNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.ParentNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.Visit(Microsoft.PowerFx.Syntax.SelfNode)">
            <summary>
            Visit <see cref="T:Microsoft.PowerFx.Syntax.SelfNode" /> leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.StrInterpNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.StrInterpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.StrInterpNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.DottedNameNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.DottedNameNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.UnaryOpNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.UnaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.UnaryOpNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.BinaryOpNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.BinaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.BinaryOpNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.VariadicOpNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.VariadicOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.VariadicOpNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.CallNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.CallNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.CallNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.ListNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.ListNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.ListNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.RecordNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.RecordNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.RecordNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.TableNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.TableNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.TableNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PreVisit(Microsoft.PowerFx.Syntax.AsNode)">
            <summary>
            Pre-visit <see cref="T:Microsoft.PowerFx.Syntax.AsNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
            <returns>Whether to visit children nodes and call <see cref="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.AsNode)"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.StrInterpNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.StrInterpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.DottedNameNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.UnaryOpNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.UnaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.BinaryOpNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.BinaryOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.VariadicOpNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.VariadicOpNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.CallNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.CallNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.ListNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.ListNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.RecordNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.RecordNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.TableNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.TableNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Syntax.TexlVisitor.PostVisit(Microsoft.PowerFx.Syntax.AsNode)">
            <summary>
            Post-visit <see cref="T:Microsoft.PowerFx.Syntax.AsNode" /> non-leaf node.
            </summary>
            <param name="node">The visited node.</param>
        </member>
        <member name="T:Microsoft.PowerFx.ParseResult">
            <summary>
            Result of parsing an expression. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ParseResult.Root">
            <summary>
            The top level node. Not null.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ParseResult.Errors">
            <summary>
            List of errors or warnings. Check <see cref="P:Microsoft.PowerFx.ExpressionError.IsWarning"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ParseResult.HasError">
            <summary>
            True if there were parse errors. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ParseResult.IsSuccess">
            <summary>
            True if no errors. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.ParserOptions">
            <summary>
            Options for parsing an expression.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ParserOptions.AllowsSideEffects">
            <summary>
            If true, allow parsing a chaining operator. This is only used for side-effecting operations.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.CheckResult">
            <summary>
            Result of binding an expression. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.ReturnType">
            <summary> 
            Return type of the expression. Null if type can't be determined. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.TopLevelIdentifiers">
            <summary>
            Names of fields that this formula uses. 
            null if unavailable.  
            This is only valid when <see cref="P:Microsoft.PowerFx.CheckResult.IsSuccess"/> is true.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.Errors">
            <summary>
            List of errors and warnings. Check <see cref="P:Microsoft.PowerFx.ExpressionError.IsWarning"/>.
            Not null, but empty on success.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.Expression">
            <summary>
            Parsed expression for evaluation. 
            Null on failure or if there is no evaluation. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.IsSuccess">
            <summary>
            True if no errors. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.CheckResult.Parse">
            <summary>
            Results from parsing. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.CheckResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.CheckResult"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.CheckResult.GetNodeType(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            Gets the type of a syntax node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.PowerFxConfig">
            <summary>
            A container that allows for compiler customization.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.PowerFxConfig.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.PowerFxConfig"/> class.        
            </summary>
            <param name="cultureInfo">Culture to use.</param>        
        </member>
        <member name="P:Microsoft.PowerFx.PowerFxConfig.FunctionInfos">
            <summary>
            Information about available functions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.PowerFxConfig.#ctor(Microsoft.PowerFx.PowerFxConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.PowerFxConfig"/> class.
            Copy constructor. Should only be used on a locked PowerFxConfig object. 
            </summary>
            <param name="other">Config to clone from.</param>
        </member>
        <member name="M:Microsoft.PowerFx.PowerFxConfig.BuildWithEnumStore(System.Globalization.CultureInfo,Microsoft.PowerFx.Core.Types.Enums.EnumStoreBuilder)">
            <summary>
            Stopgap until Enum Store is refactored. Do not rely on, this will be removed. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.PowerFxConfig.GetAllFunctionNames">
            <summary>
            List all functions names registered in the config. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.PowerFxConfig.WithoutDisplayNames">
            <summary>
            Some scenarios require that lookups be done with logical names only.
            This returns the same PowerFxConfig with the display name provider disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Engine">
            <summary>
            Expose binding logic for Power Fx. 
            Derive from this to provide evaluation abilities. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Engine.Config">
            <summary>
            Configuration symbols for this Power Fx engine.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.#ctor(Microsoft.PowerFx.PowerFxConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Engine"/> class.
            </summary>
            <param name="powerFxConfig"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.GetAllFunctionNames">
            <summary>
            List all functions (both builtin and custom) registered with this evaluator. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.CreateResolver(Microsoft.PowerFx.PowerFxConfig)">
            <summary>
            Create a resolver for use in binding. This is called from <see cref="M:Microsoft.PowerFx.Engine.Check(System.String,Microsoft.PowerFx.Types.RecordType,Microsoft.PowerFx.ParserOptions)"/>.
            Base classes can override this is there are additional symbols not in the config.
            </summary>
            <param name="alternateConfig">An alternate config that can be provided. Should default to engine's config if null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.Tokenize(System.String)">
            <summary>
                Tokenize an expression to a sequence of <see cref="T:Microsoft.PowerFx.Syntax.Token" />s.
            </summary>
            <param name="expressionText"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.Parse(System.String,Microsoft.PowerFx.ParserOptions)">
            <summary>
            Parse the expression without doing any binding.
            </summary>
            <param name="expressionText"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.Check(System.String,Microsoft.PowerFx.Types.RecordType,Microsoft.PowerFx.ParserOptions)">
            <summary>
            Parse and Bind an expression. 
            </summary>
            <param name="expressionText">the expression in plain text. </param>
            <param name="parameterType">types of additional args to pass.</param>
            <param name="options">parser options to use.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.Check(Microsoft.PowerFx.ParseResult,Microsoft.PowerFx.Types.RecordType)">
            <summary>
            Type check a formula without executing it. 
            </summary>
            <param name="parse">the parsed expression. Obtain from <see cref="M:Microsoft.PowerFx.Engine.Parse(System.String,Microsoft.PowerFx.ParserOptions)"/>.</param>
            <param name="parameterType">types of additional args to pass.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.CreateEvaluator(Microsoft.PowerFx.CheckResult)">
            <summary>
            Derived class can override to provide evaluation ability. Called after binding to return an eval object. 
            </summary>
            <param name="result">results of binding.</param>
            <returns>An <see cref="T:Microsoft.PowerFx.IExpression"/> to apply to the result.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.CreateIntellisense">
            <summary>
            Optional hook to customize intellisense. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.Suggest(System.String,Microsoft.PowerFx.Types.RecordType,System.Int32)">
            <summary>
            Get intellisense from the formula.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.CreateFieldRenamer(Microsoft.PowerFx.Types.RecordType,Microsoft.PowerFx.Core.Utils.DPath,Microsoft.PowerFx.Core.Utils.DName)">
            <summary>
            Creates a renamer instance for updating a field reference from <paramref name="parameters"/> in expressions.
            </summary>
            <param name="parameters">Type of parameters for formula. The fields in the parameter record can 
            be acecssed as top-level identifiers in the formula. Must be the names from before any rename operation is applied.</param>
            <param name="pathToRename">Path to the field to rename.</param>
            <param name="updatedName">New name. Replaces the last segment of <paramref name="pathToRename"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.GetInvariantExpression(System.String,Microsoft.PowerFx.Types.RecordType)">
            <summary>
            Convert references in an expression to the invariant form.
            </summary>
            <param name="expressionText">textual representation of the formula.</param>
            <param name="parameters">Type of parameters for formula. The fields in the parameter record can 
            be acecssed as top-level identifiers in the formula. If DisplayNames are used, make sure to have that mapping
            as part of the RecordType.</param>
            <returns>The formula, with all identifiers converted to invariant form.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Engine.GetDisplayExpression(System.String,Microsoft.PowerFx.Types.RecordType)">
            <summary>
            Convert references in an expression to the display form.
            </summary>
            <param name="expressionText">textual representation of the formula.</param>
            <param name="parameters">Type of parameters for formula. The fields in the parameter record can 
            be acecssed as top-level identifiers in the formula. If DisplayNames are used, make sure to have that mapping
            as part of the RecordType.</param>
            <returns>The formula, with all identifiers converted to display form.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.ErrorKind">
            <summary>
            Indicates the error on a record in a connected data source. 
            This must be kept in sync with the document enum "ErrorKind".
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.ExpressionError">
            <summary>
            Error message. This could be a compile time error from parsing or binding, 
            or it could be a runtime error wrapped in a <see cref="T:Microsoft.PowerFx.Types.ErrorValue"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ExpressionError.Message">
            <summary>
            A description of the error message. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ExpressionError.Span">
            <summary>
            Source location for this error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ExpressionError.Kind">
            <summary>
            Runtime error code.This may be empty for compile-time errors. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.ExpressionError.IsWarning">
            <summary>
            A warning does not prevent executing the error. See <see cref="P:Microsoft.PowerFx.ExpressionError.Severity"/> for more details.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.FormulaWithParameters">
            <summary>
            Encapsulate a formula and the parameters it has available. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.FormulaWithParameters.#ctor(System.String,Microsoft.PowerFx.Types.RecordType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.FormulaWithParameters"/> class.
            </summary>
            <param name="expression">The text version of the expression.</param>
            <param name="parameterTypes">The static type of parameters (context) available to this formula. 
            If omited, this formula doesn't have any additional parameters. 
            </param>
        </member>
        <member name="T:Microsoft.PowerFx.FunctionInfo">
            <summary>
            Information about a built-in function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.FunctionInfo.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.FunctionInfo.MinArity">
            <summary>
            Minimal arity of the function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.FunctionInfo.MaxArity">
            <summary>
            Maximal arity of the function.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.IExpression">
            <summary>
            A parsed expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.IExpressionExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.PowerFx.IExpression"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.IExpressionExtensions.Eval(Microsoft.PowerFx.IExpression,Microsoft.PowerFx.Types.RecordValue,System.Threading.CancellationToken)">
            <summary>
            Evaluate the expression with a given set of record values.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.IPowerFxEngine">
            <summary>
            Provide an interface to the RecalcEngine.
            </summary>
            <note>
            This is the minimal set of functionality required of a RecalcEngine. Implementations may also provide other public methods, fields, etc.
            </note>
        </member>
        <member name="M:Microsoft.PowerFx.IPowerFxEngine.Check(System.String,Microsoft.PowerFx.Types.RecordType,Microsoft.PowerFx.ParserOptions)">
            <summary>
            Checks that the provided expression is valid. This means that it is syntactically value and that all types referenced in the epxression are defined in the parameterType.
            </summary>
            <param name="expressionText">the string representation of the expression to be checked.</param>
            <param name="parameterType">the (composite) type definition required to validate the expression.</param>
            <param name="options">the parser options to use when validating the expression.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.IPowerFxScope">
            <summary>
            Provide intellisense (Design-time) support. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IPowerFxScope.Check(System.String)">
            <summary>
            Check for errors in the given expression. 
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IPowerFxScope.Suggest(System.String,System.Int32)">
            <summary>
            Provide intellisense for expression.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.IPowerFxScopeDisplayName">
            <summary>
            Provide display name translation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IPowerFxScopeDisplayName.TranslateToDisplayName(System.String)">
            <summary>
            Translate entity logical name to display name.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.TokenResultType">
            <summary>
            Token result type (this matches formula bar token type defined in PowerAppsTheme.ts).
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.ArgumentSuggestions.TextSuggestions(Microsoft.PowerFx.Intellisense.ArgumentSuggestions.TryGetEnumSymbol,System.Boolean,Microsoft.PowerFx.Core.Types.DType,System.Int32,System.Boolean@)">
            <summary>
            This method returns the suggestions for second and third arguments of the Text function.
            </summary>
            <param name="tryGetEnumSymbol">
            Getter for enum symbols intended for the suggestions.
            </param>
            <param name="suggestUnescapedEnums">
            Whether to suggest unescaped enums.
            </param>
            <param name="scopeType">
            Type of the enclosing scope from where intellisense is run.
            </param>
            <param name="argumentIndex">
            The current index of the argument from where intellisense is run.
            </param>
            <param name="requiresSuggestionEscaping">
            Set to whether the argument needs to be string escaped.
            </param>
            <returns>
            Enumerable of suggestions wherein the key is the suggestion text and the value is its type.
            </returns>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.ArgumentSuggestions._languageCodeSuggestions">
            <summary>
            Cached list of language code suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.ArgumentSuggestions.GetLanguageCodeSuggestions">
            <summary>
            Initializes or retrieves from the cache <see cref="F:Microsoft.PowerFx.Intellisense.ArgumentSuggestions._languageCodeSuggestions"/>.
            </summary>
            <returns>
            List of language code suggestions.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.FunctionCategoryProvider.GetFunctionCategories">
            <summary>
            Returns a list of all the function categories in the document.
            The enumerated function categories are locale-specific.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.FunctionCategoryProvider.GetFunctionCategoriesAsync">
            <summary>
            Returns a list of all the function categories in the document.
            The enumerated function categories are locale-specific.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IIntellisense.Suggest(Microsoft.PowerFx.Intellisense.IntellisenseContext,Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Syntax.Formula)">
            <summary>
            Returns the result depending on the context.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.Suggestions">
            <summary>
            Enumerates suggestions for the current position in some specified input.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.ReplacementStartIndex">
            <summary>
            Returns the start index of the input string at which the suggestion has to be replaced upon selection of the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.ReplacementLength">
            <summary>
            Returns the length of text to be replaced with the current suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.IsFunctionScope">
            <summary>
            A boolean value indicating whether the cursor is in function scope or not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.CurrentFunctionOverloadIndex">
            <summary>
            Index of the overload in 'FunctionOverloads' to be displayed in the UI.
            This is equal to -1 when IsFunctionScope = False.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.FunctionOverloads">
            <summary>
            Enumerates function overloads for the function to be displayed.
            This is empty when IsFunctionScope = False.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.Exception">
            <summary>
            Exception information in event of error.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseResult.SignatureHelp">
            <summary>
            Function signature help for this result, complies to Language Server Protocol.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.Kind">
            <summary>
            The Kind of Suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.IconKind">
            <summary>
            What kind of icon to display next to the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.DisplayText">
            <summary>
            This is the string that will be displayed to the user.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.HasErrors">
            <summary>
            Indicates if there are errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.FunctionParameterDescription">
            <summary>
            Description, suitable for UI consumption.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.Definition">
            <summary>
            Description, suitable for UI consumption.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.IsTypeMatch">
            <summary>
            A boolean value indicating if the suggestion matches the expected type in the rule.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.Overloads">
            <summary>
            Returns the list of suggestions for the overload of the function.
            This is populated only if the suggestion kind is a function and if the function has overloads.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IIntellisenseSuggestion.ShouldPreselect">
            <summary>
            A boolean value indicating if the suggestion should be preselected by the formula bar
            In canvas, used for Primary Output properties.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.Intellisense.FunctionRecordNameSuggestionHandler.Run(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions as appropriate to the internal Suggestions and SubstringSuggestions lists of intellisenseData.
            Returns true if intellisenseData is handled and no more suggestions are to be found and false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.Intellisense.NodeKindSuggestionHandler.Run(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions as appropriate to the internal Suggestions and SubstringSuggestions lists of intellisenseData.
            Returns true if intellisenseData is handled and no more suggestions are to be found and false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.Intellisense.NullNodeSuggestionHandler.Run(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions as appropriate to the internal Suggestions and SubstringSuggestions lists of intellisenseData.
            Returns true if intellisenseData is handled and no more suggestions are to be found and false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.Intellisense.RecordNodeSuggestionHandler">
            <summary>
            Suggests operators that can be used on a value of type record or table.  E.g. In, As. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.Intellisense.StrNumLitNodeSuggestionHandler.Run(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions as appropriate to the internal Suggestions and SubstringSuggestions lists of intellisenseData.
            Returns true if intellisenseData is handled and no more suggestions are to be found and false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseContext.InputText">
            <summary>
            The input string for intellisense.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseContext.CursorPosition">
            <summary>
            Cursor position for the intellisense input string.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.IntellisenseData.DefaultIntellisenseData">
            <summary>
            This class represents the default intellisense result.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.DefaultIntellisenseData.DefaultTryAugmentSignature(Microsoft.PowerFx.Core.Functions.TexlFunction,System.Int32,System.String,System.Int32,System.Int32@,System.Int32@,System.String@,System.String@)">
            <summary>
            No-op, default Intellisense does not augment signatures at this stage.
            </summary>
            <param name="func"></param>
            <param name="argIndex"></param>
            <param name="paramName"></param>
            <param name="highlightStart"></param>
            <param name="newHighlightStart">
            0 when this method returns.
            </param>
            <param name="newHighlightEnd">
            0 when this method returns.
            </param>
            <param name="newParamName">
            <see cref="F:System.String.Empty"/> when this method returns.
            </param>
            <param name="newInvariantParamName">
            <see cref="F:System.String.Empty"/> when this method returns.
            </param>
            <returns>
            False.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.DefaultIntellisenseData.GenerateDefaultParameterDescriptionSuffix(Microsoft.PowerFx.Core.Functions.TexlFunction,System.String)">
            <summary>
            Returns nothing, default Intellisense does not suffix parameters by default.
            </summary>
            <param name="function">
            The function that will not be suffixed.
            </param>
            <param name="paramName">
            The parameter that will not be suffixed.
            </param>
            <returns><see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData">
            <summary>
            A transient runtime representation of data necessary to complete <see cref="M:Microsoft.PowerFx.Intellisense.Intellisense.Suggest(Microsoft.PowerFx.Intellisense.IntellisenseContext,Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Syntax.Formula)"/>.
            Instances of classes that implement these are candidates to become realized as instances of
            <see cref="T:Microsoft.PowerFx.Intellisense.IntellisenseResult"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.ReplacementStartIndex">
            <summary>
            If an Intellisense suggestion is selected, the is the start index that should be replaced.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.ReplacementLength">
            <summary>
            The number of indices from <see cref="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.ReplacementStartIndex"/> that the replacement should
            assume if a suggestion is selected.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.CurFunc">
            <summary>
            The function that the intellisense data may be associated with.  This value is null if intellisense was
            not called from within a valid function signature.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.ArgCount">
            <summary>
            The number of argument present in the formula when intellisense is called.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.ArgIndex">
            <summary>
            The current index of the cursor position relative to the <see cref="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.CurFunc"/>'s other arguments.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.Script">
            <summary>
            The input script for which the Intellisense was called.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.TryAugmentSignature(Microsoft.PowerFx.Core.Functions.TexlFunction,System.Int32,System.String,System.Int32,System.Int32@,System.Int32@,System.String@,System.String@)">
            <summary>
            Called when the signature results of <see cref="T:Microsoft.PowerFx.Intellisense.IIntellisenseResult"/> are being created.
            This method should return true if the signature information has been augmented and the args
            matching the output parameters are set accordingly.  It should return false if the signature should
            remain unaltered.
            </summary>
            <param name="func">
            Function that pertains to the input signature.
            </param>
            <param name="argIndex">
            The index of the argument for which Intellisense is being calculated.
            </param>
            <param name="paramName">
            The name of the parameter in the signature.
            </param>
            <param name="highlightStart">
            The index in the string , which may be highlighted in the UI
            and is thusly named.
            </param>
            <param name="newHighlightStart">
            Should be set to the resultant new highlight start position if the method returns true.  If the method
            returns false, this value will be ignored.
            </param>
            <param name="newHighlightEnd">
            Should be set to the resultant new highlight end position if the method returns true.  If the method
            returns false, this value will be ignored.
            </param>
            <param name="newParamName">
            Should be set to the resultant new parameter name if the method returns true.  If the method
            returns false, this value will be ignored.
            </param>
            <param name="newInvariantParamName">
            Should be set to the resultant new invariant parameter name if the method returns true.  If the
            method returns false, this value will be ignored.
            </param>
            <returns>
            True if the method was augmented, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData.GenerateParameterDescriptionSuffix(Microsoft.PowerFx.Core.Functions.TexlFunction,System.String)">
            <summary>
            Should return a suffix for the provided <paramref name="function"/> and <paramref name="paramName"/>.
            </summary>
            <param name="function">
            The suffix candidate.
            </param>
            <param name="paramName">
            The parameter of <paramref name="function"/> that may be suffixed.
            </param>
            <returns>
            Just the suffix for the parameter, and empty string if no suffix is intended.
            </returns>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.ContextScope">
            <summary>
            Type that defines valid symbols in the formula.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.DetermineSuggestibility(System.String,Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Returns true if <paramref name="suggestion"/> should be added to the suggestion list based on
            <paramref name="type"/> and false otherwise.  May be used after suggestions and node type are found.
            Note: The default behavior has it so that all candidates are suggestible.  This may not always be
            desired.
            </summary>
            <param name="suggestion">
            Candidate suggestion string.
            </param>
            <param name="type">
            Type of the node at the caller's context.
            </param>
            <returns>
            Whether the provided candidate suggestion is valid per the provided type.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryAddSuggestionsForLeftNodeScope(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            This method is executed by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense"/> when it is run for a formula whose cursor
            is positioned to the right of a <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>, but not after the right node of the
            <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>.  If it returns true, further calculations will cease and the
            Intellisense handler will complete.  If it returns false, then fallback suggestion calculations will be run.
            </summary>
            <param name="leftNode">
            Left node in the <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/> at which the cursor is pointed at the time of
            invocation.
            </param>
            <returns>
            True iff a suggestion was added, false if no suggestion was added (default suggestion behavior will
            run).
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.OnAddedSuggestionsForLeftNodeScope(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            This method is executed by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense"/> when it is run for a formula whose cursor
            is positioned to the right of a <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>, but not after the right node of the
            <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>.  It is run after all suggestions have been added for
            <paramref name="node"/> and may be used to add additional suggestions after the rest.  This method
            does not alter control flow.
            </summary>
            <param name="node">
            Node for which suggestions may be added or other actions committed.
            </param>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.DoesNameCollide(System.String)">
            <summary>
            Should return true if name collides with existing symbols and false otherwise.  Used to determine
            whether to prepend a prefix to an enum value.
            </summary>
            <param name="name">
            Name in question.
            </param>
            <returns>
            True if the provided name collides with an existing name or identifier, false otherwise.
            </returns>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.SuggestUnqualifiedEnums">
            <summary>
            Should unqualified enums be suggested.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryGetEnumSymbol(System.String,Microsoft.PowerFx.Core.Binding.TexlBinding,Microsoft.PowerFx.Core.Types.Enums.EnumSymbol@)">
            <summary>
            Retrieves an <see cref="T:Microsoft.PowerFx.Core.Types.Enums.EnumSymbol"/> from <paramref name="binding"/> (if necessary).
            </summary>
            <param name="name">
            Name of the enum symbol for which to look.
            </param>
            <param name="binding">
            Binding in which may be looked for the enum symbol.
            </param>
            <param name="enumSymbol">
            Should be set to the symbol for <paramref name="name"/> if it is found, and left null otherwise.
            </param>
            <returns>
            True if the enum symbol was found, false otherwise.
            </returns>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.EnumSymbols">
            <summary>
            A list of the enum symbols defined for intellisense.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryAddCustomColumnTypeSuggestions(Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Tries to add custom suggestions for a column specified by <paramref name="type"/>.
            </summary>
            <param name="type">
            The type of the column for which suggestions may be added.
            </param>
            <returns>
            True if suggestions were added and default column suggestion behavior should not be executed,
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryAddCustomDottedNameSuggestions(Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            This method is executed by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense"/> when it is run for a formula whose cursor
            is positioned to the right of a <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>.
            Tries to add custom dotten name suggestions by a provided type for the left node to the
            <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>.
            </summary>
            <param name="type">
            Type of the lhs of a <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/> for which suggestions may be added to
            this.
            </param>
            <returns>
            True if operation was successful and default suggestion behavior should be short circuited and
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.BeforeAddSuggestionsForDottedNameNode(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            This method is executed by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense"/> when it is run for a formula whose cursor
            is positioned to the right of a <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>, regardless as to whether the
            position is before, amidst, or after the left node of the <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/>.  It is run
            before any suggestions have been added and is not intended to change control flow.
            </summary>
            <param name="node">
            Left node in the <see cref="T:Microsoft.PowerFx.Syntax.DottedNameNode"/> at which the cursor is pointed at the time of
            invocation.
            </param>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.ShouldSuggestFunction(Microsoft.PowerFx.Core.Functions.TexlFunction)">
            <summary>
            This method is called by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense"/> to determine whether a candidate suggestion
            that represents a function should be suggested.
            </summary>
            <param name="function">
            Candidate suggestion wherein the key represents the suggestion name and the value represents its
            type.
            </param>
            <returns>
            True if the function may be suggested, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.GetArgumentSuggestions(Microsoft.PowerFx.Core.Functions.TexlFunction,Microsoft.PowerFx.Core.Types.DType,System.Int32,Microsoft.PowerFx.Syntax.TexlNode[],System.Boolean@)">
            <summary>
            Returns a list of argument suggestions for a given function, scope type, and argument index.
            </summary>
            <param name="function">
            The function for which we are producing argument suggestions.
            </param>
            <param name="scopeType">
            The type of the scope from where intellisense is run.
            </param>
            <param name="argumentIndex">
            The index of the current argument of <paramref name="function"/>.
            </param>
            <param name="argsSoFar">
            The arguments that are present in the formula at the time of invocation.
            </param>
            <param name="requiresSuggestionEscaping">
            Is set to whether the characters within the returned suggestion need have its characters escaped.
            </param>
            <returns>
            Argument suggestions for the provided context.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.GetFunctionSuggestionKind(Microsoft.PowerFx.Core.Functions.TexlFunction,System.Int32)">
            <summary>
            Should return the kind of suggestion that may be recomended for the
            <paramref name="argumentIndex"/> parameter of <paramref name="function"/>.
            </summary>
            <param name="function">
            Function that the kind of suggestion for which this function determines.
            </param>
            <param name="argumentIndex">
            The index of the argument to which the suggestion pertains.
            </param>
            <returns>
            The suggestion kind for the hypothetical suggestion.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddCustomSuggestionsForValuePossibilities">
            <summary>
            This method is called after all default suggestions for value possibilities have been run and may be
            overridden to provide custom suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddCustomSuggestionsForGlobals">
            <summary>
            May be overridden to provide custom suggestions at the point in intellisense runtime when
            suggestions for global identifiers are added.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AfterAddSuggestionsForGlobals">
            <summary>
            May be overridden to provide custom suggestions or change other state after the point in
            intellisense runtime where suggestions for global identifiers are added.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AfterAddSuggestionsForUnaryOperatorKeywords">
            <summary>
            May be overridden to provide custom suggestions or change other state after the point in
            intellisense runtime where suggestions for unary operator keywords are added.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.SuggestableFirstNames">
            <summary>
            This collection is appended to the resultant suggestion list when
            <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.FirstNameNodeSuggestionHandler"/> is used.  It may be overridden to provide
            additional first name node suggestions.  It is called when the cursor is.
            </summary>
            <returns>
            Sequence of suggestions for first name node context.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddSuggestionsForConstantKeywords">
            <summary>
            Invokes <see cref="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddSuggestionsForConstantKeywords"/> to supply suggestions for constant
            keywords.  May be overridden to supply additional suggestions or to change the set of acceptable
            keywords.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AdditionalGlobalSuggestions">
            <summary>
            List of additional variable suggestions that may be provided in an overridden method.
            Here, the key is the suggestion text and the value is the kind of desired icon.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddAdditionalSuggestionsForLocalSymbols">
            <summary>
            This method may be overriden to add additional suggestions for local selections to the resultant
            suggestion list for first name nodes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddAdditionalSuggestionsForKeywordSymbols(Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            This method may be overriden to add additional suggestions for generic selections to the resultant
            suggestion list for first name nodes.
            </summary>
            <param name="currentNode">
            The node for which Intellisense is invoked.
            </param>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.IsFunctionElligibleForRecordSuggestions(Microsoft.PowerFx.Core.Functions.TexlFunction)">
            <param name="function">
            Function whose eligibility is called into question.
            </param>
            <returns>
            Returns true if <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.FunctionRecordNameSuggestionHandler"/> should make suggestions
            for the provided function and false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryGetSpecialFunctionType(Microsoft.PowerFx.Core.Functions.TexlFunction,Microsoft.PowerFx.Syntax.CallNode,Microsoft.PowerFx.Core.Types.DType@)">
            <param name="function">
            Function in question.
            </param>
            <param name="callNode">
            The node at the present cursor position.
            </param>
            <param name="type">
            If overridden, may be set to a custom function type when returns.
            </param>
            <returns>
            True if a special type was found and type is set, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryAddFunctionRecordSuggestions(Microsoft.PowerFx.Core.Functions.TexlFunction,Microsoft.PowerFx.Syntax.CallNode,Microsoft.PowerFx.Syntax.Identifier)">
            <summary>
            This method may be overridden to provide additional suggestions for function record names after
            the default have been added.  It should return true if intellisenseData is handled and no more
            suggestions are to be found and false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.TryAddCustomFunctionSuggestionsForErrorNode(Microsoft.PowerFx.Core.Functions.TexlFunction,System.Int32)">
            <summary>
            This method is called by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.ErrorNodeSuggestionHandlerBase"/> if function was
            discovered as a parent node to the current error node.  It may be overridden to add additional
            suggestions pertaining to <paramref name="function"/> and <paramref name="argIndex"/>.  If it returns true,
            <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.ErrorNodeSuggestionHandlerBase"/> will return immediately and no more suggestions
            will be added.
            </summary>
            <param name="function">
            Function for which additional suggestions may be added.
            </param>
            <param name="argIndex">
            Index of the argument on which the cursor is positioned.
            </param>
            <returns>
            True if all suggestions have been added and no more should be.  False otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddSuggestionsBeforeTopLevelErrorNodeSuggestions">
            <summary>
            This method is called by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.ErrorNodeSuggestionHandlerBase"/> before top level
            suggestions are added.  See <see cref="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddSuggestionsForTopLevel(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Syntax.TexlNode)"/> for
            details.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddAlternativeTopLevelSuggestionsForErrorNode">
            <summary>
            This method is called by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.ErrorNodeSuggestionHandlerBase"/> if no top level
            suggestions are added.  It may be overridden to supply alternative top level suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.AddSuggestionsAfterTopLevelErrorNodeSuggestions">
            <summary>
            This method is called by <see cref="T:Microsoft.PowerFx.Intellisense.Intellisense.ErrorNodeSuggestionHandlerBase"/> after it has added all
            its suggestions to <see cref="P:Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData.Suggestions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddSuggestionsForAfterValue(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Core.Types.DType)">
            <summary>
            Suggest possibilities that can come after a value of a certain type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddSuggestionsForEnum(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Core.Types.Enums.EnumSymbol,System.String)">
            <summary>
            Adds suggestions for an enum, with an optional prefix.
            </summary>
            <param name="intellisenseData"></param>
            <param name="enumInfo"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddTopLevelSuggestions(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Core.Types.DType,System.String)">
            <summary>
            Adds suggestions that start with the MatchingString from the given type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddTopLevelSuggestionsForCursorType(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Syntax.CallNode,System.Int32)">
            <summary>
            Adds suggestions for type scoped at current cursor position.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.TryAddSpecificSuggestionsForGivenArgPosition(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Syntax.CallNode,System.Int32)">
            <summary>
            Adds suggestions for given argument position.
            Returns true if any function specific suggestions are added to the list. Otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddTopLevelSuggestionsForGivenNode(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Syntax.TexlNode,Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            Adds suggestions for a given node.
            </summary>
            <param name="intellisenseData"></param>
            <param name="node">Node for which suggestions are needed.</param>
            <param name="currentNode">Current node in the traversal.</param>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddSuggestionsForTopLevel(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,Microsoft.PowerFx.Syntax.TexlNode)">
            <summary>
            Adds suggestions that start with the matchingString from the result from the types in scope.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddFunctionOverloads(System.String,Microsoft.PowerFx.Intellisense.IntellisenseSuggestionList,Microsoft.PowerFx.Intellisense.IntellisenseSuggestion)">
            <summary>
            This is a Private method used only by the SuggestFunctions() method to add overload suggestions to the existing suggestions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.GetReplacementLength(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Based on our current token, determine how much of it should be replaced.
            </summary>
            <param name="intellisenseData"></param>
            <param name="tokenStart"></param>
            <param name="tokenEnd"></param>
            <param name="validNames"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseHelper.AddSuggestionsForRuleScope(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions that start with the matchingString from the top level scope of the binding.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseResult._suggestions">
            <summary>
            List of suggestions associated with the result.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseResult._script">
            <summary>
            The script to which the result pertains.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseResult._functionSignatures">
            <summary>
            List of candidate signatures for the Intellisense, compliant with Language Server Protocol
            <see cref="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.SignatureHelp"/>.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseResult._functionOverloads">
            <summary>
            List of candidate signatures for the Intellisense, compliant with Document Server intellisense.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseResult._currentArgumentIndex">
            <summary>
            The index of the current argument.  0 if there are no arguments associated with the result, either
            because the function is parameterless or because intellisense was not called from within a valid
            function signature.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.SignatureHelp">
            <summary>
            Derives signature help information for Language Server Protocol compliance from extant signature
            info.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseResult.CreateFunctionSignature(System.String,System.Collections.Generic.IEnumerable{Microsoft.PowerFx.Intellisense.SignatureHelp.ParameterInformation})">
            <summary>
            Returns a string that represents the full call signature as defined by <paramref name="functionName"/>,
            <paramref name="parameters"/>, as well as <see cref="P:Microsoft.PowerFx.Syntax.LocalizationUtils.CurrentLocaleListSeparator"/>.
            </summary>
            <param name="functionName"></param>
            <param name="parameters">
                List of parameters in the relevant signature for <paramref name="functionName"/>.
            </param>
            <returns>
            A label that represents the call signature; e.g. <code>Set(variable, lambda)</code>
            </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.IntellisenseResult.GetParameterHighlightAndDescription(Microsoft.PowerFx.Intellisense.IntellisenseData.IIntellisenseData,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Gets the parameter description and corresponding highlight information for the provided
            function and index.  Provides special augmentation behavior via handlers.
            </summary>
            <param name="data">
            Data off of which the result is based.
            </param>
            <param name="paramName"></param>
            <param name="invariantParamName"></param>
            <param name="funcDisplayString"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.ReplacementStartIndex">
            <summary>
            Returns the start index of the input string at which the suggestion has to be replaced upon selection of the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.ReplacementLength">
            <summary>
            Returns the length of text to be replaced with the current suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.IsFunctionScope">
            <summary>
            A boolean value indicating whether the cursor is in function scope or not.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.CurrentFunctionOverloadIndex">
            <summary>
            Index of the overload in 'FunctionOverloads' to be displayed in the UI.
            This is equal to -1 when IsFunctionScope = False.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.Suggestions">
            <summary>
            Enumerates suggestions for the current position in some specified input.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseResult.FunctionOverloads">
            <summary>
            Enumerates function overloads for the function to be displayed.
            This is empty when IsFunctionScope = False.
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion._argCount">
            <summary>
            This is valid if the current kind is of SuggestionKind.Function, else -1.
            This is used to filter out suggestions that have less arguments than ArgIndex.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.SortPriority">
            <summary>
            Gets the sort priority for this suggestion. 0 is lowest priority.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.Text">
            <summary>
            Gets the text form of the DisplayText  for the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.FunctionName">
            <summary>
            This is an internal field that stores the simple function name if the suggestion is a Function.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.Type">
            <summary>
            This is an internal field that stores the type of the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.ExactMatch">
            <summary>
            The exact matching string. This is used for sorting the suggestions.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.FunctionParameterDescription">
            <summary>
            Description for the current function parameter.
            For example: This is used to provide parameter description for the highlighted function parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.Definition">
            <summary>
            Description, suitable for UI consumption.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.IsTypeMatch">
            <summary>
            A boolean value indicating if the suggestion matches the expected type in the rule.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.ShouldPreselect">
            <summary>
            A boolean value indicating if the suggestion is the primary output property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.Overloads">
            <summary>
            Returns the list of suggestions for the overload of the function.
            This is populated only if the suggestion kind is a function and if the function has overloads.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.Kind">
            <summary>
            The Kind of Suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.IconKind">
            <summary>
            What kind of icon to display next to the suggestion.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.DisplayText">
            <summary>
            This is the string that will be displayed to the user.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.HasErrors">
            <summary>
            Indicates if there are errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.IntellisenseSuggestion.ArgIndex">
            <summary>
            This is valid only if the Kind is Function, else -1.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.ISpecialCaseHandler.Run(Microsoft.PowerFx.Core.Texl.Intellisense.IIntellisenseContext,Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData,System.Collections.Generic.List{Microsoft.PowerFx.Intellisense.IntellisenseSuggestion})">
            <summary>
            Handles special cases as needed by fixing replacementStartIndex and matchingLength.
            Additionally, filters suggestion list if needed.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Intellisense.ISuggestionHandler.Run(Microsoft.PowerFx.Intellisense.IntellisenseData.IntellisenseData)">
            <summary>
            Adds suggestions as appropriate to the internal Suggestions and SubstringSuggestions lists of intellisenseData.
            Returns true if suggestions are found and false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.SuggestionKind">
            <summary>
            The kind of a suggestion.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Intellisense.UIString">
            <summary>
            Object for the UI display string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.UIString.Text">
            <summary>
            This is the string that will be displayed to the user.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.UIString.HighlightStart">
            <summary>
            The start index of the matching string from the input text in the display string.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Intellisense.UIString.HighlightEnd">
            <summary>
            The end Index of the matching string from the input text in the display string.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.BindingErrorType">
            <summary>
            A binding error type, attached to syntax nodes whose type is incorrect.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.BindingErrorType.Visit(Microsoft.PowerFx.Types.ITypeVistor)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Types.BlankType">
            <summary>
            Represents a Blank (similar to Null) value. BlankType is compatible with other types. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.ExternalTypeKind">
            <summary>
            This enum represents types which are not supported by PowerFx
            but which may be supported by external data formats.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.ExternalType">
            <summary>
            FormulaType that can be used by UntypedObject instances to
            indicate that the type of the data does not exist in PowerFx.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.FormulaType">
            <summary>
            Base class for type of a Formula. 
            Formula Types are a class hiearchy.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.FormulaType.OptionSetValue">
            <summary>
            Internal use only to represent an arbitrary (un-backed) option set value.
            Should be removed if possible.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.ITypeVistor">
            <summary>
            Visitor for walking <see cref="T:Microsoft.PowerFx.Types.FormulaType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.OptionSetValueType">
            <summary>
            Power Fx type for an enum-like things such as OptionSets. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.OptionSetValueType.OptionSetName">
            <summary>
            The name of the source Option Set for this type.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.OptionSetValueType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Types.OptionSetValueType"/> class.
            Internal use only. Used by legacy clients to represent an un-backed option set, and should be removed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.OptionSetValueType.LogicalNames">
            <summary>
            List of logical names within this option set. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.OptionSetValueType.TryGetValue(System.String,Microsoft.PowerFx.Types.OptionSetValue@)">
            <summary>
            Try to get a value given the logical name. 
            </summary>
            <param name="logicalName"></param>
            <param name="osValue"></param>
            <returns>False if logical name is not in the option set. </returns>
        </member>
        <member name="T:Microsoft.PowerFx.Types.UnknownType">
            <summary>
            An unknown type, attached to syntax nodes whose type cannot be determined.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.UnknownType.Visit(Microsoft.PowerFx.Types.ITypeVistor)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.PowerFx.Types.CollectionTableValue`1">
            <summary>
            Create a TableValue over a dotnet collection class.
            Depending on what collection interfaces it exposes will determine the capabilities 
            (such as Enumeration, Count, Index).
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
        </member>
        <member name="T:Microsoft.PowerFx.Types.DateTimeValue">
            <summary>
            Represents a Date and Time together, in the local time zone.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.DateValue">
            <summary>
            Represents a Date only, without a time component, in the local time zone.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.DValue`1">
            <summary>
            Represents the type (T | Blank | Error), where T is neither Blank nor Error
            TableValue stores this class (Rows), and it can be used in any situation
            where a value can be either a known type or Blank/Error.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.ErrorValue">
            <summary>
            A Runtime error. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.FormulaValue">
            <summary>
            Represent a value in the formula expression. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.ToObject">
            <summary>
            Converts to a .net object so host can easily consume the value. 
            Primitives (string, boolean, numbers, etc) convert directly to their .net type. 
            Records convert to a strongly typed or dynamic object so field notation works. 
            Tables convert to an enumerable of records. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.FromJson(System.String)">
            <summary>
            Convenience method to create a value from a json representation. 
            </summary>
            <param name="jsonString"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Convenience method to create a value from a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.NewRecordFromFields(Microsoft.PowerFx.Types.NamedValue[])">
            <summary>
            Create a record from the list of fields provided. 
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.NewTable(Microsoft.PowerFx.Types.RecordType,Microsoft.PowerFx.Types.RecordValue[])">
            <summary>
            Construct a table from records. Assumed that Records must be the same type. 
            Already having RecordValues (as oppossed to a unknown T or errors) lets us avoid type marshalling.
            </summary>
            <param name="recordType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.FormulaValue.NewSingleColumnTable``1(Microsoft.PowerFx.Types.PrimitiveValue{``0}[])">
            <summary>
            Convenience method to create a table over an array of primitives. 
            The Table will have 1 column 'Value'.
            </summary>
            <typeparam name="T">type of the primitive. This maps directly to a formula Value.</typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Types.InMemoryTableValue">
            <summary>
            In-memory table. Constructed over RecordValues. 
            DValue means items could be error or blank. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.NamedValue">
            <summary>
            Helper class for representing fields or columns.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.OptionSetValue">
            <summary>
            A value within an option set. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.OptionSetValue.Option">
            <summary>
            Logical name for this option set value.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.OptionSetValue.DisplayName">
            <summary>
            Get the display name for this value. If no display name is available, 
            returns the logical name <see cref="P:Microsoft.PowerFx.Types.OptionSetValue.Option"/>.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.PrimitiveValue`1">
            <summary>
            Helper for non-aggregate values that are represented as a single .net object.
            See <see cref="T:Microsoft.PowerFx.Types.PrimitiveValueConversions"/> for converting between a T and a FormulaType.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.PowerFx.Types.PrimitiveValueConversions">
            <summary>
            Mapping between builtin dotnet Types and power fx types.
            This works for primitives derived from <see cref="T:Microsoft.PowerFx.Types.PrimitiveValue`1"/>. 
            To marshal complex types, use explicit construction methods or a TypeMarshaller.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.PrimitiveValueConversions.TryGetFormulaType(System.Type,Microsoft.PowerFx.Types.FormulaType@)">
            <summary>
            Get the dotnet to powerfx type mapping. 
            </summary>
            <param name="type">dotnet type.</param>
            <param name="fxType">Power Fx type that corresponds to the dotnet type.</param>
            <returns>true if the dotnet type is a builtin primitive mapping to fx, else false.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.PrimitiveValueConversions.Marshal(System.Object,System.Type)">
            <summary>
            Marshal a primitive type. 
            For complex types, use a TypeMarshallerCache or other explicit methods. 
            </summary>
            <param name="value">value to marhal.</param>
            <param name="type">type of the value object, needed in case value is null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.PrimitiveValueConversions.TryMarshal(System.Object,Microsoft.PowerFx.Types.FormulaType,Microsoft.PowerFx.Types.FormulaValue@)">
            <summary>
            Marshal from a dotnet primitive to a given Power Fx type. 
            Call <see cref="M:Microsoft.PowerFx.Types.FormulaValue.ToObject"/> to go the other direction and get a dotnet object from a formulavalue. 
            </summary>
            <param name="value">dotnet value.</param>
            <param name="type">target power fx type to marshal to.</param>
            <param name="result"></param>
            <returns>True on success with result set to a non-null value.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Types.RecordValue">
            <summary>
            Represent a Record. Records have named fields which can be other values. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.RecordValue.Fields">
            <summary>
            Fields and their values directly available on this record. 
            The field names should match the names on <see cref="P:Microsoft.PowerFx.Types.RecordValue.Type"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.RecordValue.#ctor(Microsoft.PowerFx.Types.RecordType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.PowerFx.Types.RecordValue"/> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.PowerFx.Types.RecordValue.Type">
            <summary>
            The RecordType of this value.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.RecordValue.GetField(System.String)">
            <summary>
            Get a field on this record.         
            </summary>
            <param name="fieldName">Name of field on this record.</param>
            <returns>Field value or blank if missing. </returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.RecordValue.TryGetField(Microsoft.PowerFx.Types.FormulaType,System.String,Microsoft.PowerFx.Types.FormulaValue@)">
            <summary>
            Derived classes must override to provide values for fields. 
            </summary>
            <param name="fieldType">Expected type of the field.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="result"></param>
            <returns>true if field is present, else false.</returns>
        </member>
        <member name="M:Microsoft.PowerFx.Types.RecordValue.ToObject">
            <summary>
            Return an object, which can be used as 'dynamic' to fetch fields. 
            If this RecordValue was created around a host object, the host can override and return the source object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerFx.Types.TableValue">
            <summary>
            Represents a table (both single columna and multi-column). 
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Types.TableValue.ValueName">
            <summary>
            Often marshalling an array will create a Single Column Tables with a single "Value" column. 
            </summary>
        </member>
        <member name="F:Microsoft.PowerFx.Types.TableValue.ValueDName">
            <summary>
            DName for ValueName.
            </summary>
        </member>
        <member name="M:Microsoft.PowerFx.Types.TableValue.Index(System.Int32)">
            <summary>
            Lookup the record at the given 1-based index, or return an error value if out of range.
            </summary>
            <param name="index1">1-based index.</param>
            <returns>The record or an errorValue.</returns>
        </member>
        <member name="T:Microsoft.PowerFx.Types.IUntypedObject">
            <summary>
            The backing implementation for UntypedObjectValue, for example Json, Xml,
            or the Ast or Value system from another language.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.IUntypedObject.Type">
            <summary>
            Use ExternalType if the type is incompatible with PowerFx.
            </summary>
        </member>
        <member name="P:Microsoft.PowerFx.Types.IUntypedObject.Item(System.Int32)">
            <summary>
            0-based index.
            </summary>
        </member>
        <member name="T:Microsoft.PowerFx.Types.ValidFormulaValue">
            <summary>
            All values except BlankValue and ErrorValue should inherit from this base class.
            BlankValue and ErrorValue inherit directly from FormulaValue. The type parameter
            T in DValue is constrained to ValidFormulaValue, meaning that BlankValue
            and ErrorValue can never be substituted for T.
            </summary>
        </member>
    </members>
</doc>
